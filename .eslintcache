[{"C:\\Users\\runal\\Documents\\Programming\\Learning\\Learning web development\\base-react-app\\src\\index.js":"1","C:\\Users\\runal\\Documents\\Programming\\Learning\\Learning web development\\base-react-app\\src\\App.js":"2","C:\\Users\\runal\\Documents\\Programming\\Learning\\Learning web development\\base-react-app\\src\\reportWebVitals.js":"3","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js":"4","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js":"5","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js":"6","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js":"7","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js":"8","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js":"9","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js":"10","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js":"11","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\index.js":"12","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\style.js":"13","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js":"14","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MainPage\\MainPage.js":"15","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MainPage\\style.js":"16","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js":"17","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js":"18","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":528,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":639,"mtime":1614986309207,"results":"24","hashOfConfig":"25"},{"size":555,"mtime":1610601607380,"results":"26","hashOfConfig":"25"},{"size":4015,"mtime":1614810043240,"results":"27","hashOfConfig":"25"},{"size":2598,"mtime":1615075799191,"results":"28","hashOfConfig":"25"},{"size":379,"mtime":1611216192358,"results":"29","hashOfConfig":"25"},{"size":2397,"mtime":1615075793867,"results":"30","hashOfConfig":"25"},{"size":2417,"mtime":1610603118085,"results":"31","hashOfConfig":"25"},{"size":1867,"mtime":1610603283550,"results":"32","hashOfConfig":"25"},{"size":1651,"mtime":1617500171951,"results":"33","hashOfConfig":"25"},{"size":488,"mtime":1615092640698,"results":"34","hashOfConfig":"25"},{"size":932,"mtime":1615083272156,"results":"35","hashOfConfig":"25"},{"size":18370,"mtime":1617500190719,"results":"36","hashOfConfig":"25"},{"size":1897,"mtime":1615177002374,"results":"37","hashOfConfig":"25"},{"size":17796,"mtime":1617500129652,"results":"38","hashOfConfig":"25"},{"size":2352,"mtime":1615092792394,"results":"39","hashOfConfig":"25"},{"size":106,"mtime":1617500304923,"results":"40","hashOfConfig":"25"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1stpdlk",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"jxf2gb",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Users\\runal\\Documents\\Programming\\Learning\\Learning web development\\base-react-app\\src\\index.js",[],["86","87"],"C:\\Users\\runal\\Documents\\Programming\\Learning\\Learning web development\\base-react-app\\src\\App.js",[],"C:\\Users\\runal\\Documents\\Programming\\Learning\\Learning web development\\base-react-app\\src\\reportWebVitals.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js",[],["88","89"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js",[],["90","91"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],["92","93"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\index.js",["94","95"],"import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport style from \"./style.js\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {base_url} from \"../../constants.js\"\r\nconst useStyles = makeStyles(style);\r\n\r\n\r\n\r\nfunction DebugToolbar(props) {\r\n  const classes = useStyles();\r\n  const placeholder = \"hue, sat, val\";\r\n  return (\r\n    <div className={classes.column}>    \r\n      Debugging Toolbar:  \r\n      <div className={classes.column}>\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              const url = base_url + \"/testImage\";\r\n              //const url = \"/testImage\"\r\n              const form = new FormData();\r\n              form.append(\"file\", props.originalImage);\r\n              const analyze_options = {\r\n                method: \"POST\",\r\n                body: form,\r\n              };\r\n              fetch(url, analyze_options)\r\n                .then((response) => {\r\n                  if (!response.ok) throw Error(response.statusText);\r\n                  return response.json();\r\n                })\r\n                .then((image => {\r\n                  props.changeTestImage(image)\r\n                }))\r\n                .catch((error) => console.log(error)); \r\n            }}\r\n          >\r\n            Test Sending/Retrieving Image from API\r\n        </Button>\r\n        <img\r\n          src={\"data:image/png;base64,\" + props.testImage}\r\n          className={classes.exampleImage}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DebugToolbar;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MainPage\\MainPage.js",["96"],"import React from \"react\";\r\nimport Cropper from \"../ImageCropper/imageCropper\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport styles from \"./style.js\";\r\nimport classNames from \"classnames\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\nimport DebugToolbar from \"../DebugToolbar/index.js\";\r\n\r\nimport { maskConstants } from \"../MaskSelector/constants.js\"\r\nimport {base_url} from \"../../constants.js\"\r\n\r\nclass MainPage extends React.Component {\r\n  state = {\r\n    currentImage: null,\r\n    originalImage: null,\r\n    currentImages: null,\r\n    edgedImage: null,\r\n    analyzed: false,\r\n    imageWidth: 2.54,\r\n    useCrop: false,\r\n    areas: [],\r\n    lowerMaskOne: maskConstants[\"B\"][\"lower_range\"][0],\r\n    lowerMaskTwo: maskConstants[\"B\"][\"lower_range\"][1],\r\n    upperMaskOne: maskConstants[\"B\"][\"upper_range\"][0],\r\n    upperMaskTwo: maskConstants[\"B\"][\"upper_range\"][1],\r\n    testImage: null,\r\n    obj: null,\r\n    manualWidth: false,\r\n    jumpHeading: null,\r\n    zipImgList: null,\r\n  };\r\n\r\n  componentDidMount(){\r\n    if (this.props.location.state != null){\r\n      const inState = this.props.location.state\r\n      const obj = this.props.location.state.obj\r\n      if (obj != null){\r\n        \r\n        if (obj[\"drawn_image\"]){ \r\n          this.setState({\r\n            currentImage: obj[\"drawn_image\"],\r\n          }) \r\n        }\r\n        else{\r\n          this.setState({\r\n            currentImage: obj[\"orig\"],\r\n          }) \r\n        }\r\n        this.setState({\r\n          originalImage: obj[\"orig\"],\r\n          jumpHeading: obj[\"id\"]\r\n        })\r\n      }\r\n      this.setState({\r\n        zipImgList: inState.zipImgList\r\n      }) \r\n    }\r\n  }\r\n\r\n  goToHome = () => {\r\n    if (this.state.zipImgList != null){\r\n      this.props.history.push({\r\n        pathname: '/home',\r\n        state: { zipImgList: this.state.zipImgList }\r\n      })\r\n    }\r\n    else{\r\n      this.props.history.push('/home');\r\n    }\r\n  }\r\n\r\n  getBase64(file, cb) {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n        cb(reader.result)\r\n    };\r\n    reader.onerror = function (error) {\r\n        console.log('Error: ', error);\r\n    };\r\n  }\r\n\r\n  completeCrop = (image) => {\r\n    this.setState({\r\n      useCrop: false,\r\n      currentImage: image,\r\n      originalImage: image,\r\n    });\r\n  };\r\n\r\n  onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let imgFile = event.target.files[0];\r\n      //let idCardBase64 = '';\r\n      this.getBase64(imgFile, (result) => {\r\n        this.setState({\r\n          currentImage: result,\r\n          originalImage: result,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  changeMask = async (mask) => {\r\n    this.setState({\r\n      lowerMaskOne: mask[\"lower_range\"][0],\r\n      lowerMaskTwo: mask[\"lower_range\"][1],\r\n      upperMaskOne: mask[\"upper_range\"][0],\r\n      upperMaskTwo: mask[\"upper_range\"][1],\r\n    })\r\n  };\r\n  reanalyzeImage = async (obj) => {\r\n    this.setState({\r\n      lowerMaskOne: obj[\"lower_range\"][0],\r\n      lowerMaskTwo: obj[\"lower_range\"][1],\r\n      upperMaskOne: obj[\"upper_range\"][0],\r\n      upperMaskTwo: obj[\"upper_range\"][1],\r\n    }, () => {\r\n      this.analyzeImage()\r\n    })\r\n  };\r\n  analyzeImage = async () => {\r\n    if (this.state.currentImage && this.state.imageWidth) {\r\n      const url = base_url + \"/measure\";\r\n      //const url = \"/measure\"\r\n      const form = new FormData();\r\n      form.append(\"base64\", this.state.originalImage);\r\n      form.append(\"width\", this.state.imageWidth);\r\n      form.append(\"manual_width\", this.state.manualWidth)\r\n      form.append(\"lower_mask_one\", this.state.lowerMaskOne);\r\n      form.append(\"lower_mask_two\", this.state.lowerMaskTwo);\r\n      form.append(\"upper_mask_one\", this.state.upperMaskOne);\r\n      form.append(\"upper_mask_two\", this.state.upperMaskTwo);\r\n\r\n      //Then analyze\r\n      const analyze_options = {\r\n        method: \"POST\",\r\n        body: form,\r\n      };\r\n      fetch(url, analyze_options)\r\n        .then((response) => {\r\n          if (!response.ok) throw Error(response.statusText);\r\n            return response.json();\r\n        })\r\n        .then((matrix) => {\r\n          if (matrix[1][1][\"error\"] == false){\r\n            this.setState({\r\n              analyzed: true,\r\n              currentImage: matrix[1][1][\"drawn_image\"],\r\n              originalImage: matrix[1][1][\"orig\"],\r\n              edgedImage: matrix[1][1][\"edged_image\"],\r\n              currentImages: matrix,\r\n              areas: matrix[1][1][\"areas\"]\r\n            });\r\n            alert(\"Images analyzed\")\r\n          }\r\n          else{\r\n            alert(matrix[1][1][\"error_message\"])\r\n          }\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else if (this.state.currentImage && !this.state.imageWidth) {\r\n      alert(\"Please specify an image width\");\r\n    } else if (!this.state.currentImage && this.state.imageWidth) {\r\n      alert(\"Please upload an image\");\r\n    } else {\r\n      alert(\"Please upload an image and specify it's real width\");\r\n    }\r\n  };\r\n\r\n  handleWidthChange = (event) => {\r\n    this.setState({\r\n      imageWidth: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleCropChange = () => {\r\n    this.setState({\r\n      useCrop: true,\r\n    });\r\n  };\r\n\r\n  handleLowerMaskOneChange = (event) => {\r\n    this.setState({\r\n      lowerMaskOne: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleLowerMaskTwoChange = (event) => {\r\n    this.setState({\r\n      lowerMaskTwo: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleUpperMaskOneChange = (event) => {\r\n    this.setState({\r\n      upperMaskOne: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleUpperMaskTwoChange = (event) => {\r\n    this.setState({\r\n      upperMaskTwo: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleChangeTestImage = (image) => {\r\n    this.setState({\r\n      testImage: image,\r\n    })\r\n  }\r\n\r\n  handleCheckbox = name => event => {\r\n    this.setState({ [name]: event.target.checked });\r\n  };\r\n\r\n  modifyLowerSat = (val) => {\r\n    let newLowerMaskOne = [...this.state.lowerMaskOne];\r\n    let newLowerMaskTwo = [...this.state.lowerMaskTwo];\r\n    newLowerMaskOne[1] += val;\r\n    newLowerMaskTwo[1] += val;    \r\n\r\n    if (newLowerMaskOne[1] > 255){\r\n      newLowerMaskOne[1] = 255;\r\n    }\r\n    if (newLowerMaskTwo[1] > 255){\r\n      newLowerMaskTwo[1] = 255;\r\n    }\r\n    if (newLowerMaskOne[1] > this.state.upperMaskOne[1] || newLowerMaskTwo[1] > this.state.upperMaskTwo[1]){\r\n      alert(\"Cannot increase lower sat above upper sat\")\r\n    }\r\n    else{\r\n      this.setState({\r\n        lowerMaskOne: newLowerMaskOne,\r\n        lowerMaskTwo: newLowerMaskTwo,\r\n      })\r\n    }\r\n  }\r\n  modifyUpperSat = (val) => {\r\n    let newUpperMaskOne = [...this.state.upperMaskOne];\r\n    let newUpperMaskTwo = [...this.state.upperMaskTwo];\r\n    newUpperMaskOne[1] += val;    \r\n    newUpperMaskTwo[1] += val;\r\n\r\n    if (newUpperMaskOne[1] > 255){\r\n      newUpperMaskOne[1] = 255;\r\n    }\r\n    if (newUpperMaskTwo[1] > 255){\r\n      newUpperMaskTwo[1] = 255;\r\n    }\r\n    if (newUpperMaskOne[1] < this.state.lowerMaskOne[1] || newUpperMaskTwo[1] < this.state.lowerMaskTwo[1]){\r\n      alert(\"Cannot lower upper sat below lower sat\")\r\n    }\r\n    else{\r\n      this.setState({\r\n        upperMaskOne: newUpperMaskOne,\r\n        upperMaskTwo: newUpperMaskTwo,\r\n      })\r\n    }\r\n  }\r\n\r\n  modifyLowerVal = (val) => {\r\n    let newLowerMaskOne = [...this.state.lowerMaskOne];\r\n    let newLowerMaskTwo = [...this.state.lowerMaskTwo];\r\n    newLowerMaskOne[2] += val;\r\n    newLowerMaskTwo[2] += val;    \r\n\r\n    if (newLowerMaskOne[2] > 255){\r\n      newLowerMaskOne[2] = 255;\r\n    }\r\n    if (newLowerMaskTwo[2] > 255){\r\n      newLowerMaskTwo[2] = 255;\r\n    }\r\n    if (newLowerMaskOne[2] > this.state.upperMaskOne[2] || newLowerMaskTwo[2] > this.state.upperMaskTwo[2]){\r\n      alert(\"Cannot increase lower val above upper val\")\r\n    }\r\n    else{\r\n      this.setState({\r\n        lowerMaskOne: newLowerMaskOne,\r\n        lowerMaskTwo: newLowerMaskTwo,\r\n      })\r\n    }\r\n  }\r\n  modifyUpperVal = (val) => {\r\n    let newUpperMaskOne = [...this.state.upperMaskOne];\r\n    let newUpperMaskTwo = [...this.state.upperMaskTwo];\r\n    newUpperMaskOne[2] += val;    \r\n    newUpperMaskTwo[2] += val;\r\n\r\n    if (newUpperMaskOne[2] > 255){\r\n      newUpperMaskOne[2] = 255;\r\n    }\r\n    if (newUpperMaskTwo[2] > 255){\r\n      newUpperMaskTwo[2] = 255;\r\n    }\r\n    if (newUpperMaskOne[2] < this.state.lowerMaskOne[2] || newUpperMaskTwo[2] < this.state.lowerMaskTwo[2]){\r\n      alert(\"Cannot lower upper val below lower val\")\r\n    }\r\n    else{\r\n      this.setState({\r\n        upperMaskOne: newUpperMaskOne,\r\n        upperMaskTwo: newUpperMaskTwo,\r\n      })\r\n    }\r\n  }\r\n\r\n  modifyHueRange = (val) => {    \r\n    let newLowerMaskTwo = [...this.state.lowerMaskTwo];\r\n    let newUpperMaskOne = [...this.state.upperMaskOne];\r\n    \r\n    newLowerMaskTwo[0] -= val;    \r\n    newUpperMaskOne[0] += val;    \r\n\r\n    if (newLowerMaskTwo[0] < 0){\r\n      newLowerMaskTwo[0] = 0;\r\n    }\r\n    if (newUpperMaskOne[0] > 180){\r\n      newUpperMaskOne[0] = 180;\r\n    }\r\n\r\n    this.setState({\r\n      lowerMaskTwo: newLowerMaskTwo,\r\n      upperMaskOne: newUpperMaskOne,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classNames(classes.main, classes.mainRaised)}>\r\n        <div className={classes.container}>\r\n            <Button \r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={this.goToHome}>\r\n                Back to Homepage\r\n            </Button>\r\n          <div className={classes.title}>\r\n            <h2>Automatic Wound Area Measurement</h2>\r\n          </div>\r\n          <div className={classes.row}>\r\n            <div className={classes.column}>\r\n              <div className={classes.button} style={{ flex: 1 }}>\r\n                <h3>Upload Image</h3>\r\n                <Button\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                    >\r\n                    Upload Image\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"myImage\"\r\n                        hidden\r\n                        onChange={this.onImageChange}\r\n                    />\r\n                    </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                <div style={{\"height\": 40}}/>\r\n                <Tooltip title=\"This is the length of the green line, if manual, this is the width of the image\" placement=\"top-start\">\r\n                  <TextField\r\n                    id=\"standard-number\"\r\n                    label=\"Enter reference width (cm)\"\r\n                    defaultValue={this.state.imageWidth}\r\n                    InputProps={{\r\n                      onChange: this.handleWidthChange,\r\n                    }}\r\n                  />\r\n                </Tooltip>\r\n                <div className={classes.row}>\r\n                  <Checkbox\r\n                    checked={this.state.manualWidth}\r\n                    onChange={this.handleCheckbox('manualWidth')}\r\n                    value=\"manualWidth\"\r\n                  />\r\n                  <div className={classes.centeredText}>Set width to manual</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={classes.column}>\r\n              \r\n              {this.state.useCrop ? (\r\n                <Cropper\r\n                  currentImage={this.state.originalImage}\r\n                  completeCrop={this.completeCrop}\r\n                />\r\n                ) : <>\r\n                        {       \r\n                          this.state.analyzed ? (\r\n                            <>\r\n                              <h4>Image with current mask</h4>\r\n                              <img\r\n                                src={this.state.currentImage}\r\n                                className={classes.images}\r\n                                alt=\"\"\r\n                              />\r\n                            </>\r\n                          ) : null\r\n                        }\r\n                      <h3>Image {this.state.jumpHeading}</h3>\r\n                      <div className={classes.column}>\r\n                          <img\r\n                            src={this.state.currentImage}\r\n                            className={classes.images}\r\n                            alt=\"\"\r\n                          />\r\n                          <Button\r\n                            className={classes.cropButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.handleCropChange}\r\n                          >\r\n                            Crop Image\r\n                          </Button>\r\n                        </div>\r\n                    </>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div style={{\"height\":20}}/>\r\n          <MaskSelector\r\n              lowerMaskOne={this.state.lowerMaskOne}\r\n              lowerMaskTwo={this.state.lowerMaskTwo}\r\n              upperMaskOne={this.state.upperMaskOne}\r\n              upperMaskTwo={this.state.upperMaskTwo}\r\n              onChangeLowerOne={this.handleLowerMaskOneChange.bind(this)}\r\n              onChangeLowerTwo={this.handleLowerMaskTwoChange.bind(this)}\r\n              onChangeUpperOne={this.handleUpperMaskOneChange.bind(this)}\r\n              onChangeUpperTwo={this.handleUpperMaskTwoChange.bind(this)}\r\n              changeMask={this.changeMask}\r\n          />\r\n          <div style={{\"height\":20}}/>\r\n          <div className={classes.row}>\r\n            <div className={classes.column}>\r\n              <h3>Current areas:</h3>\r\n              {this.state.areas.map((value, i) => (\r\n                <b key={i}>{value}cm^2</b>\r\n              ))}\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={this.analyzeImage}\r\n                className={classes.cropButton}\r\n              >\r\n                Measure area\r\n              </Button>\r\n            </div>\r\n            <div className={classes.row}>\r\n              <div className={classes.column}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"maroon\"}}\r\n                  onClick={()=>this.modifyLowerSat(5)}\r\n                  className={classes.hsvButton}\r\n                >\r\n                  Look for redder wounds (+sat)\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"pink\"}}\r\n                  onClick={()=>this.modifyLowerSat(-5)}\r\n                  className={classes.hsvButton}\r\n                >\r\n                  Look for pinker wounds (-sat)\r\n                </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"#800200\"}}\r\n                  onClick={()=>this.modifyLowerVal(5)}\r\n                  className={classes.hsvButton}\r\n                >\r\n                  Look for brighter wounds (+val)\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"black\"}}\r\n                  onClick={()=>this.modifyLowerVal(-5)}\r\n                  className={classes.hsvButton}\r\n                >\r\n                  Look for darker wounds (-val)\r\n                </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{\"backgroundColor\": \"green\"}}\r\n                    onClick={()=>this.modifyUpperVal(5)}\r\n                    className={classes.hsvButton}\r\n                  >\r\n                    Include more skin (+upperVal)\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{\"backgroundColor\": \"green\"}}\r\n                    onClick={()=>this.modifyUpperVal(-5)}\r\n                    className={classes.hsvButton}\r\n                  >\r\n                    Include less skin (-upperVal)\r\n                </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{\"backgroundColor\": \"green\"}}\r\n                    onClick={()=>this.modifyHueRange(5)}\r\n                    className={classes.hsvButton}\r\n                  >\r\n                    Include more wound colors (+hue range)\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{\"backgroundColor\": \"green\"}}\r\n                    onClick={()=>this.modifyHueRange(-5)}\r\n                    className={classes.hsvButton}\r\n                  >\r\n                    Reduce range of possible colors (-hue range)\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          { this.state.analyzed ?\r\n          <div className={classes.column}>\r\n            <p>Stricter farther right (+sat) and down (+val)</p>\r\n            {this.state.currentImages.map((row, i) => (\r\n              <div key={i} className={classes.row}>\r\n              {row.map((obj) => (\r\n                <img\r\n                src={obj[\"drawn_image\"]}\r\n                className={classes.gridImage}\r\n                alt=\"\"\r\n                onClick={() => this.reanalyzeImage(obj)}\r\n                />\r\n              ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          : null\r\n          }\r\n          <div style={{\"height\": 100}}/>\r\n          <DebugToolbar\r\n            originalImage={this.state.originalImage}\r\n            testImage={this.state.testImage}\r\n            changeTestImage={this.handleChangeTestImage.bind(this)}\r\n          />   \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(MainPage);\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MainPage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js",["97"],"import React from \"react\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from '@material-ui/core';\r\n\r\nimport styles from \"./style.js\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\n\r\nimport { maskConstants } from \"../MaskSelector/constants.js\"\r\nimport {base_url} from \"../../constants.js\"\r\n\r\nclass HomePage extends React.Component {\r\n    state = {\r\n        zipImgList: [],\r\n        lowerMaskOne: maskConstants[\"B\"][\"lower_range\"][0],\r\n        lowerMaskTwo: maskConstants[\"B\"][\"lower_range\"][1],\r\n        upperMaskOne: maskConstants[\"B\"][\"upper_range\"][0],\r\n        upperMaskTwo: maskConstants[\"B\"][\"upper_range\"][1],\r\n        imageWidth: 2.54,\r\n        manualWidth: false,\r\n    };\r\n\r\n    componentDidMount(){\r\n        if (this.props.location.state != null){\r\n            const inState = this.props.location.state\r\n            this.setState({\r\n                zipImgList: inState.zipImgList\r\n            }) \r\n        }\r\n\r\n        let url = base_url;\r\n        //const url = \"/\"\r\n        let form = new FormData();\r\n        form.append(\"wakeup\", \"wakeup server\");\r\n        let analyze_options = {\r\n            method: \"POST\",\r\n            body: form,\r\n        };\r\n        fetch(url, analyze_options)\r\n        .then((response) => {\r\n            if (!response.ok) throw Error(response.statusText);\r\n                return response.json();\r\n            })\r\n        .catch((error) => console.log(error));\r\n    }\r\n\r\n    uploadDayZip = async (event) => {\r\n        let zipFile = event.target.files[0]\r\n        if (zipFile) {\r\n            let url = base_url + \"/zipMeasure\";\r\n            //let url = \"/zipMeasure\"\r\n            let form = new FormData();\r\n            form.append(\"file\", zipFile);\r\n            form.append(\"width\", this.state.imageWidth);\r\n            form.append(\"manual_width\", this.state.manualWidth)\r\n            form.append(\"lower_mask_one\", this.state.lowerMaskOne);\r\n            form.append(\"lower_mask_two\", this.state.lowerMaskTwo);\r\n            form.append(\"upper_mask_one\", this.state.upperMaskOne);\r\n            form.append(\"upper_mask_two\", this.state.upperMaskTwo);\r\n            //Then analyze\r\n            const analyze_options = {\r\n                method: \"POST\",\r\n                body: form,\r\n            };\r\n            fetch(url, analyze_options)\r\n                .then((response) => {\r\n                if (!response.ok) throw Error(response.statusText);\r\n                    return response.json();\r\n                })\r\n                .then((imgList) => {\r\n                    alert(\"Images analyzed\")\r\n                    this.setState({\r\n                        zipImgList: imgList\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    if (error instanceof TypeError){\r\n                        alert(\"Too many images, make a smaller Zip file\")\r\n                    }\r\n                    else{\r\n                        console.log(error)\r\n                        alert(\"Unknown error, let Alex know about this. Error:\", error)\r\n                    }\r\n                })                 \r\n            } \r\n        else {\r\n            alert(\"Please upload an zip file\");\r\n        }\r\n    };\r\n\r\n    goToMain = () => {\r\n        if (this.state.zipImgList != null){\r\n            this.props.history.push({\r\n                pathname: '/main',\r\n                state: { obj: null, zipImgList: this.state.zipImgList }\r\n            })\r\n        }\r\n        else{\r\n            this.props.history.push('/main');\r\n        }\r\n    };\r\n\r\n    reanalyzeImage = async (obj, i) => {\r\n        obj[\"id\"] = i;\r\n        this.props.history.push({\r\n            pathname: '/main',\r\n            state: { obj: obj, zipImgList: this.state.zipImgList }\r\n        })\r\n    };\r\n\r\n    handleCheckbox = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n        \r\n    handleWidthChange = (event) => {\r\n        this.setState({\r\n            imageWidth: event.target.value,\r\n        });\r\n    };\r\n        \r\n    handleLowerMaskOneChange = (event) => {\r\n        this.setState({\r\n            lowerMaskOne: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleLowerMaskTwoChange = (event) => {\r\n        this.setState({\r\n            lowerMaskTwo: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleUpperMaskOneChange = (event) => {\r\n        this.setState({\r\n            upperMaskOne: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleUpperMaskTwoChange = (event) => {\r\n        this.setState({\r\n            upperMaskTwo: event.target.value,\r\n        });\r\n    };\r\n        \r\n    changeMask = async (mask) => {\r\n        this.setState({\r\n        lowerMaskOne: mask[\"lower_range\"][0],\r\n        lowerMaskTwo: mask[\"lower_range\"][1],\r\n        upperMaskOne: mask[\"upper_range\"][0],\r\n        upperMaskTwo: mask[\"upper_range\"][1],\r\n        })\r\n    };\r\n\r\n\r\n    modifyLowerSat = (val) => {\r\n    let newLowerMaskOne = [...this.state.lowerMaskOne];\r\n    let newLowerMaskTwo = [...this.state.lowerMaskTwo];\r\n    newLowerMaskOne[1] += val;\r\n    newLowerMaskTwo[1] += val;    \r\n\r\n    if (newLowerMaskOne[1] > 255){\r\n        newLowerMaskOne[1] = 255;\r\n    }\r\n    if (newLowerMaskTwo[1] > 255){\r\n        newLowerMaskTwo[1] = 255;\r\n    }\r\n    if (newLowerMaskOne[1] > this.state.upperMaskOne[1] || newLowerMaskTwo[1] > this.state.upperMaskTwo[1]){\r\n        alert(\"Cannot increase lower sat above upper sat\")\r\n    }\r\n    else{\r\n        this.setState({\r\n        lowerMaskOne: newLowerMaskOne,\r\n        lowerMaskTwo: newLowerMaskTwo,\r\n        })\r\n    }\r\n    }\r\n    modifyUpperSat = (val) => {\r\n    let newUpperMaskOne = [...this.state.upperMaskOne];\r\n    let newUpperMaskTwo = [...this.state.upperMaskTwo];\r\n    newUpperMaskOne[1] += val;    \r\n    newUpperMaskTwo[1] += val;\r\n\r\n    if (newUpperMaskOne[1] > 255){\r\n        newUpperMaskOne[1] = 255;\r\n    }\r\n    if (newUpperMaskTwo[1] > 255){\r\n        newUpperMaskTwo[1] = 255;\r\n    }\r\n    if (newUpperMaskOne[1] < this.state.lowerMaskOne[1] || newUpperMaskTwo[1] < this.state.lowerMaskTwo[1]){\r\n        alert(\"Cannot lower upper sat below lower sat\")\r\n    }\r\n    else{\r\n        this.setState({\r\n        upperMaskOne: newUpperMaskOne,\r\n        upperMaskTwo: newUpperMaskTwo,\r\n        })\r\n    }\r\n    }\r\n\r\n    modifyLowerVal = (val) => {\r\n    let newLowerMaskOne = [...this.state.lowerMaskOne];\r\n    let newLowerMaskTwo = [...this.state.lowerMaskTwo];\r\n    newLowerMaskOne[2] += val;\r\n    newLowerMaskTwo[2] += val;    \r\n\r\n    if (newLowerMaskOne[2] > 255){\r\n        newLowerMaskOne[2] = 255;\r\n    }\r\n    if (newLowerMaskTwo[2] > 255){\r\n        newLowerMaskTwo[2] = 255;\r\n    }\r\n    if (newLowerMaskOne[2] > this.state.upperMaskOne[2] || newLowerMaskTwo[2] > this.state.upperMaskTwo[2]){\r\n        alert(\"Cannot increase lower val above upper val\")\r\n    }\r\n    else{\r\n        this.setState({\r\n        lowerMaskOne: newLowerMaskOne,\r\n        lowerMaskTwo: newLowerMaskTwo,\r\n        })\r\n    }\r\n    }\r\n    modifyUpperVal = (val) => {\r\n    let newUpperMaskOne = [...this.state.upperMaskOne];\r\n    let newUpperMaskTwo = [...this.state.upperMaskTwo];\r\n    newUpperMaskOne[2] += val;    \r\n    newUpperMaskTwo[2] += val;\r\n\r\n    if (newUpperMaskOne[2] > 255){\r\n        newUpperMaskOne[2] = 255;\r\n    }\r\n    if (newUpperMaskTwo[2] > 255){\r\n        newUpperMaskTwo[2] = 255;\r\n    }\r\n    if (newUpperMaskOne[2] < this.state.lowerMaskOne[2] || newUpperMaskTwo[2] < this.state.lowerMaskTwo[2]){\r\n        alert(\"Cannot lower upper val below lower val\")\r\n    }\r\n    else{\r\n        this.setState({\r\n        upperMaskOne: newUpperMaskOne,\r\n        upperMaskTwo: newUpperMaskTwo,\r\n        })\r\n    }\r\n    }\r\n\r\n    modifyHueRange = (val) => {    \r\n        let newLowerMaskTwo = [...this.state.lowerMaskTwo];\r\n        let newUpperMaskOne = [...this.state.upperMaskOne];\r\n        \r\n        newLowerMaskTwo[0] -= val;    \r\n        newUpperMaskOne[0] += val;    \r\n\r\n        if (newLowerMaskTwo[0] < 0){\r\n            newLowerMaskTwo[0] = 0;\r\n        }\r\n        if (newUpperMaskOne[0] > 180){\r\n            newUpperMaskOne[0] = 180;\r\n        }\r\n\r\n        this.setState({\r\n            lowerMaskTwo: newLowerMaskTwo,\r\n            upperMaskOne: newUpperMaskOne,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classNames(classes.main, classes.mainRaised)}>\r\n                <div className={classes.container}>\r\n                    <div className={classes.column}>\r\n                        <div className={classes.title}>\r\n                            <h2>Automatic Wound Area Measurement</h2>\r\n                        </div>\r\n                        <Button \r\n                            className={classes.cropButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.goToMain}>\r\n                            Go to single image measurement\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classes.column}>\r\n                        <div style={{\"height\": 20}}/>\r\n                        <Tooltip title=\"This is the length of the green line\" placement=\"top-start\">\r\n                        <TextField\r\n                            id=\"standard-number\"\r\n                            label=\"Enter reference width (cm)\"\r\n                            defaultValue={this.state.imageWidth}\r\n                            InputProps={{\r\n                            onChange: this.handleWidthChange,\r\n                            }}\r\n                        />\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className={classes.column}>\r\n                        <h4>Select default mask</h4>\r\n                        <MaskSelector\r\n                            lowerMaskOne={this.state.lowerMaskOne}\r\n                            lowerMaskTwo={this.state.lowerMaskTwo}\r\n                            upperMaskOne={this.state.upperMaskOne}\r\n                            upperMaskTwo={this.state.upperMaskTwo}\r\n                            onChangeLowerOne={this.handleLowerMaskOneChange.bind(this)}\r\n                            onChangeLowerTwo={this.handleLowerMaskTwoChange.bind(this)}\r\n                            onChangeUpperOne={this.handleUpperMaskOneChange.bind(this)}\r\n                            onChangeUpperTwo={this.handleUpperMaskTwoChange.bind(this)}\r\n                            changeMask={this.changeMask}\r\n                        />\r\n                    </div>\r\n                    <div style={{\"height\": 10}}/>\r\n                    <div className={classes.row}>\r\n                        <div className={classes.column}>\r\n                            <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\"backgroundColor\": \"maroon\"}}\r\n                            onClick={()=>this.modifyLowerSat(5)}\r\n                            className={classes.hsvButton}\r\n                            >\r\n                            Look for redder wounds (+sat)\r\n                            </Button>\r\n                            <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\"backgroundColor\": \"pink\"}}\r\n                            onClick={()=>this.modifyLowerSat(-5)}\r\n                            className={classes.hsvButton}\r\n                            >\r\n                            Look for pinker wounds (-sat)\r\n                            </Button>\r\n                        </div>\r\n                        <div className={classes.column}>\r\n                            <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\"backgroundColor\": \"#800200\"}}\r\n                            onClick={()=>this.modifyLowerVal(5)}\r\n                            className={classes.hsvButton}\r\n                            >\r\n                            Look for brighter wounds (+val)\r\n                            </Button>\r\n                            <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\"backgroundColor\": \"black\"}}\r\n                            onClick={()=>this.modifyLowerVal(-5)}\r\n                            className={classes.hsvButton}\r\n                            >\r\n                            Look for darker wounds (-val)\r\n                            </Button>\r\n                        </div>\r\n                        <div className={classes.column}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{\"backgroundColor\": \"green\"}}\r\n                                onClick={()=>this.modifyUpperVal(5)}\r\n                                className={classes.hsvButton}\r\n                            >\r\n                                Include more skin (+upperVal)\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{\"backgroundColor\": \"green\"}}\r\n                                onClick={()=>this.modifyUpperVal(-5)}\r\n                                className={classes.hsvButton}\r\n                            >\r\n                                Include less skin (-upperVal)\r\n                            </Button>\r\n                        </div>\r\n                        <div className={classes.column}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{\"backgroundColor\": \"green\"}}\r\n                                onClick={()=>this.modifyHueRange(5)}\r\n                                className={classes.hsvButton}\r\n                            >\r\n                                Include more wound colors (+hue range)\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{\"backgroundColor\": \"green\"}}\r\n                                onClick={()=>this.modifyHueRange(-5)}\r\n                                className={classes.hsvButton}\r\n                            >\r\n                                Reduce range of possible colors (-hue range)\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{\"height\": 50}}/>\r\n                    <div className={classes.column}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            component=\"label\"\r\n                            \r\n                            color=\"primary\"\r\n                            className={classes.analyzeButton}\r\n                        >\r\n                            Upload and analyze ZIP file\r\n                            <input\r\n                                type=\"file\"\r\n                                name=\"myImage\"\r\n                                hidden\r\n                                onChange={this.uploadDayZip}\r\n                            />\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classes.column}>\r\n                        {this.state.zipImgList.map((obj, i) => (\r\n                            <div key={i} id={\"zipImg\"+i}>\r\n                                {\r\n                                    obj[\"error\"] === false \r\n                                    ?   <div className={classes.row}>\r\n                                            <img\r\n                                                src={obj[\"drawn_image\"]}\r\n                                                className={classes.colImage}\r\n                                                alt=\"\"\r\n                                                onClick={() => this.reanalyzeImage(obj, i)}\r\n                                            />\r\n                                            <div className={classes.column}>\r\n                                                <h3>Image: {i}</h3>\r\n                                                <h3>Areas</h3>\r\n                                                {\r\n                                                    obj[\"areas\"].map((area)=>(\r\n                                                        <h5>{area}cm^2</h5>\r\n                                                    ))\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    :   <div className={classes.row}>\r\n                                            <img\r\n                                                src={obj[\"orig\"]}\r\n                                                className={classes.colImage}\r\n                                                alt=\"\"\r\n                                                onClick={() => this.reanalyzeImage(obj, i)}\r\n                                            />\r\n                                            <p>Error: {obj[\"error_message\"]}</p>\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(HomePage);\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"102"},{"ruleId":"100","replacedBy":"103"},{"ruleId":"98","replacedBy":"104"},{"ruleId":"100","replacedBy":"105"},{"ruleId":"98","replacedBy":"106"},{"ruleId":"100","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":17},{"ruleId":"108","severity":1,"message":"112","line":13,"column":9,"nodeType":"110","messageId":"111","endLine":13,"endColumn":20},{"ruleId":"113","severity":1,"message":"114","line":150,"column":37,"nodeType":"115","messageId":"116","endLine":150,"endColumn":39},{"ruleId":"108","severity":1,"message":"117","line":3,"column":18,"nodeType":"110","messageId":"111","endLine":3,"endColumn":26},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],["118"],["119"],["118"],["119"],["118"],["119"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'placeholder' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Checkbox' is defined but never used.","no-global-assign","no-unsafe-negation"]