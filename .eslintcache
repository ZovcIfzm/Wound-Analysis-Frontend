[{"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js":"1","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js":"2","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js":"3","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js":"4","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js":"5","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js":"6","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js":"7","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js":"8","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js":"9","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js":"10","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js":"11","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js":"12","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js":"13","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js":"14","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js":"15","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js":"16","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js":"17","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\index.js":"18","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\style.js":"19","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\index.js":"20","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\style.js":"21","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\constants.js":"22"},{"size":941,"mtime":1635647535131,"results":"23","hashOfConfig":"24"},{"size":555,"mtime":1610601607380,"results":"25","hashOfConfig":"24"},{"size":9633,"mtime":1644217482738,"results":"26","hashOfConfig":"24"},{"size":2583,"mtime":1635647535112,"results":"27","hashOfConfig":"24"},{"size":723,"mtime":1636954535585,"results":"28","hashOfConfig":"24"},{"size":2397,"mtime":1635647535113,"results":"29","hashOfConfig":"24"},{"size":2417,"mtime":1610603118085,"results":"30","hashOfConfig":"24"},{"size":1867,"mtime":1610603283550,"results":"31","hashOfConfig":"24"},{"size":439,"mtime":1638003942284,"results":"32","hashOfConfig":"24"},{"size":6419,"mtime":1638161940892,"results":"33","hashOfConfig":"24"},{"size":1842,"mtime":1636953523347,"results":"34","hashOfConfig":"24"},{"size":237,"mtime":1644222255876,"results":"35","hashOfConfig":"24"},{"size":8269,"mtime":1644218483023,"results":"36","hashOfConfig":"24"},{"size":5888,"mtime":1644222222099,"results":"37","hashOfConfig":"24"},{"size":2421,"mtime":1638085286467,"results":"38","hashOfConfig":"24"},{"size":1917,"mtime":1644222096342,"results":"39","hashOfConfig":"24"},{"size":887,"mtime":1638003981532,"results":"40","hashOfConfig":"24"},{"size":891,"mtime":1644219898193,"results":"41","hashOfConfig":"24"},{"size":237,"mtime":1636953569203,"results":"42","hashOfConfig":"24"},{"size":3360,"mtime":1638004002175,"results":"43","hashOfConfig":"24"},{"size":691,"mtime":1638004376855,"results":"44","hashOfConfig":"24"},{"size":69,"mtime":1638003948599,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"jxf2gb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js",[],["95","96"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],["97","98"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js",["99"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport NavBar from \"../NavBar\";\r\n\r\nimport styles from \"./style.js\";\r\n\r\nimport tutorial_1_uploaded from \"../../assets/tutorial_11_28_21/tutorial_1_uploaded.PNG\";\r\nimport tutorial_2_select_mask from \"../../assets/tutorial_11_28_21/tutorial_2_select_mask.PNG\";\r\nimport tutorial_3_measure_area from \"../../assets/tutorial_11_28_21/tutorial_3_measure_area.PNG\";\r\nimport tutorial_4_borders from \"../../assets/tutorial_11_28_21/tutorial_4_borders.PNG\";\r\nimport tutorial_5_areas from \"../../assets/tutorial_11_28_21/tutorial_5_areas.PNG\";\r\nimport tutorial_non_clean_1 from \"../../assets/tutorial_11_28_21/tutorial_non_clean_1.PNG\";\r\nimport tutorial_non_clean_2 from \"../../assets/tutorial_11_28_21/tutorial_non_clean_2.PNG\";\r\nimport tutorial_non_clean_3 from \"../../assets/tutorial_11_28_21/tutorial_non_clean_3.PNG\";\r\nimport tutorial_short_1 from \"../../assets/tutorial_11_28_21/tutorial_short_1.PNG\";\r\nimport tutorial_split_1_lines from \"../../assets/tutorial_11_28_21/tutorial_split_1_lines.PNG\";\r\nimport tutorial_split_2_edited from \"../../assets/tutorial_11_28_21/tutorial_split_2_edited.PNG\";\r\nimport tutorial_small_wound_1 from \"../../assets/tutorial_11_28_21/tutorial_small_wound_1.PNG\";\r\nimport tutorial_small_wound_2 from \"../../assets/tutorial_11_28_21/tutorial_small_wound_2.PNG\";\r\nimport tutorial_crop_1 from \"../../assets/tutorial_11_28_21/tutorial_crop_1.PNG\";\r\n\r\nimport { base_url } from \"../../constants.js\";\r\n\r\nconst HomePage = (props) => {\r\n  useEffect(() => {\r\n    //Wake up backend server\r\n    //By sending a fetch request to the backend server, this will wake it up\r\n    //Heroku automatically shuts down apps after a long period of inactivity\r\n\r\n    let url = base_url;\r\n    let form = new FormData();\r\n    form.append(\"wakeup\", \"wakeup server\");\r\n    let analyze_options = {\r\n      method: \"POST\",\r\n      body: form,\r\n    };\r\n    fetch(url, analyze_options)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ ...styles.main, ...styles.mainRaised }}>\r\n      <div style={styles.container}>\r\n        <div style={styles.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Home/Tutorial page</h4>\r\n        </div>\r\n        <NavBar history={props.history} />\r\n        <div style={styles.column}>\r\n          <h3>Tutorial</h3>\r\n          <div style={styles.column}>\r\n            <h4>Area measurement: </h4>\r\n            The first step is to upload an image. By default, the software will\r\n            look and measure the green line to use as a width reference.\r\n            <img\r\n              src={tutorial_1_uploaded}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            After uploading an image, select a mask that tells the detector what\r\n            counts as a wound.\r\n            <img\r\n              src={tutorial_2_select_mask}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            Press the \"Measure Area\" button, and you'll get a notification when\r\n            the image is analyzed.\r\n            <img\r\n              src={tutorial_3_measure_area}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            After the image is analyzed, the image will now have borders on it.\r\n            <img src={tutorial_4_borders} style={styles.tutorialImage} alt=\"\" />\r\n            At the bottom, the areas of these borders will be listed in order of\r\n            left to right.\r\n            <img src={tutorial_5_areas} style={styles.tutorialImage} alt=\"\" />\r\n            <h4>Adjusting borders</h4>\r\n            About a third of the time the borders will require adjustments.\r\n            <img\r\n              src={tutorial_non_clean_1}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            You can adjust the borders by adjusting the mask/detector settings,\r\n            which simply checks for colors within a range. Each of the\r\n            adjustments has a label to help you out. In this case, we want to\r\n            \"include more skin\" as it will broaden the search parameters.\r\n            <img\r\n              src={tutorial_non_clean_2}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            The borders are as you see above now.\r\n            <img\r\n              src={tutorial_non_clean_3}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            <h4>Small wounds</h4>\r\n            Areas too small are automatically filtered out and not shown.\r\n            <img\r\n              src={tutorial_small_wound_1}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            You can adjust the filter to show smaller areas.\r\n            <img\r\n              src={tutorial_small_wound_2}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            <h4>Short green lines</h4>\r\n            Sometimes due to lighting, not all of the green line is detected.\r\n            You can adjust the width value to account for that.\r\n            <img src={tutorial_short_1} style={styles.tutorialImage} alt=\"\" />\r\n            <h4>Split green lines</h4>\r\n            Sometimes, due to lighting, the green line might be split in the\r\n            middle.\r\n            <img\r\n              src={tutorial_split_1_lines}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            You can adjust the detector settings to broaden or restrict the\r\n            search for what counts as the green line.\r\n            <img\r\n              src={tutorial_split_2_edited}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            <h4>Manual width</h4>\r\n            Worst case scenario, you can change the width measurement to manual\r\n            to use the image width as reference rather then length of the green\r\n            line. To do so, check the checkbox to convert to manual, then crop\r\n            the image to the desired width.\r\n            <img src={tutorial_crop_1} style={styles.tutorialImage} alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js",["100","101","102","103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport Cropper from \"../ImageCropper/imageCropper\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from \"./style.js\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\nimport LineMaskSelector from \"../LineMaskSelector/index.js\";\r\nimport NavBar from \"../NavBar\";\r\n\r\nimport { base_url } from \"../../constants.js\";\r\n\r\nimport { Context } from \"../context\";\r\n\r\nfunction SingleAnalysisPage(props) {\r\n  const { settings, setSettings } = React.useContext(Context);\r\n  const [currentImage, setCurrentImage] = useState();\r\n  const [originalImage, setOriginalImage] = useState();\r\n  const [currentImages, setCurrentImages] = useState();\r\n  const [useCrop, setUseCrop] = useState(false);\r\n  const [areas, setAreas] = useState([]);\r\n  const [jumpHeading, setJumpHeading] = useState();\r\n  const [minDisplayWidth, setMinDisplayWidth] = useState(0.1);\r\n\r\n  useEffect(() => {\r\n    if (props.location.state != null) {\r\n      const obj = props.location.state.obj;\r\n      if (obj != null) {\r\n        if (obj[\"drawn_image\"]) {\r\n          setCurrentImage(obj[\"drawn_image\"]);\r\n        } else {\r\n          setCurrentImage(obj[\"orig\"]);\r\n        }\r\n        setOriginalImage(obj[\"orig\"]);\r\n        setJumpHeading(obj[\"id\"]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const getBase64 = (file, cb) => {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n      cb(reader.result);\r\n    };\r\n    reader.onerror = function (error) {\r\n      console.log(\"Error: \", error);\r\n    };\r\n  };\r\n\r\n  const completeCrop = (image) => {\r\n    setUseCrop(false);\r\n    setCurrentImage(image);\r\n    setOriginalImage(image);\r\n  };\r\n\r\n  const onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let imgFile = event.target.files[0];\r\n      getBase64(imgFile, (result) => {\r\n        setCurrentImage(result);\r\n        setOriginalImage(result);\r\n      });\r\n    }\r\n  };\r\n\r\n  const reanalyzeImage = async (obj) => {\r\n    let newSettings = {\r\n      ...settings,\r\n      lowerBound: obj[\"lowerBound\"],\r\n      upperBound: obj[\"upperBound\"],\r\n      autoMask: false,\r\n    };\r\n    setSettings(newSettings);\r\n    analyzeImage(newSettings);\r\n  };\r\n\r\n  const analyzeImage = async () => {\r\n    if (currentImage && settings.width) {\r\n      const url = base_url + \"/measure\";\r\n\r\n      const data = {\r\n        base64: originalImage,\r\n        settings: settings,\r\n      };\r\n\r\n      fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) throw Error(response.statusText);\r\n          return response.json();\r\n        })\r\n        .then((matrix) => {\r\n          if (matrix[1][1][\"error\"] == false) {\r\n            setCurrentImage(matrix[1][1][\"drawn_image\"]);\r\n            setOriginalImage(matrix[1][1][\"orig\"]);\r\n            setCurrentImages(matrix);\r\n            setAreas(matrix[1][1][\"areas\"]);\r\n            alert(\"Images analyzed\");\r\n          } else {\r\n            alert(matrix[1][1][\"error_message\"]);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          alert(error);\r\n        });\r\n    } else if (currentImage && !settings.width) {\r\n      alert(\"Please specify an image width\");\r\n    } else if (!currentImage && settings.width) {\r\n      alert(\"Please upload an image\");\r\n    } else {\r\n      alert(\"Please upload an image and specify it's real width\");\r\n    }\r\n  };\r\n\r\n  const handleWidthChange = (event) => {\r\n    setSettings((prevSettings) => ({\r\n      ...prevSettings,\r\n      width: parseFloat(event.target.value),\r\n    }));\r\n  };\r\n\r\n  const handleCropChange = () => {\r\n    setUseCrop(true);\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...styles.main, ...styles.mainRaised }}>\r\n      <div style={styles.container}>\r\n        <div style={styles.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Single-image measurement</h4>\r\n        </div>\r\n        <NavBar history={props.history} />\r\n        <div style={styles.borderedContainer}>\r\n          <div style={styles.row}>\r\n            <div style={styles.column}>\r\n              <div style={styles.button} style={{ flex: 1 }}>\r\n                <h3>Upload Image</h3>\r\n                <Button variant=\"contained\" component=\"label\">\r\n                  Upload Image\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"myImage\"\r\n                    hidden\r\n                    onChange={onImageChange}\r\n                  />\r\n                </Button>\r\n              </div>\r\n              <div style={styles.column}>\r\n                <div style={{ height: 40 }} />\r\n                <Tooltip\r\n                  title=\"If width is set to manual, the width of the image will be used as reference, otherwies the width of the green line will be used.\"\r\n                  placement=\"top-start\"\r\n                >\r\n                  <div style={styles.container}>\r\n                    <TextField\r\n                      id=\"standard-number\"\r\n                      label=\"Enter reference width (cm)\"\r\n                      defaultValue={settings.width}\r\n                      InputProps={{\r\n                        onChange: handleWidthChange,\r\n                      }}\r\n                    />\r\n                    <div style={styles.row}>\r\n                      <Checkbox\r\n                        checked={!settings.autoWidth}\r\n                        onChange={() =>\r\n                          setSettings((prevSettings) => ({\r\n                            ...prevSettings,\r\n                            autoWidth: !prevSettings[\"autoWidth\"],\r\n                          }))\r\n                        }\r\n                        value=\"autoMask\"\r\n                      />\r\n                      <div style={styles.centeredText}>Set width to manual</div>\r\n                    </div>\r\n                  </div>\r\n                </Tooltip>\r\n                {settings.autoWidth ? <LineMaskSelector /> : null}\r\n              </div>\r\n            </div>\r\n\r\n            <div style={styles.imageColumn}>\r\n              {useCrop ? (\r\n                <Cropper\r\n                  currentImage={originalImage}\r\n                  completeCrop={completeCrop}\r\n                />\r\n              ) : (\r\n                <>\r\n                  <h3>Image {jumpHeading}</h3>\r\n                  <div style={styles.column}>\r\n                    <img src={currentImage} style={styles.images} alt=\"\" />\r\n                    <Button\r\n                      style={styles.cropButton}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleCropChange}\r\n                    >\r\n                      Crop Image\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <MaskSelector />\r\n        <div style={styles.borderedContainer}>\r\n          <div style={styles.areasRow}>\r\n            <div style={styles.column}>\r\n              <h2>Areas</h2>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={analyzeImage}\r\n                style={styles.thinButton}\r\n              >\r\n                Measure area\r\n              </Button>\r\n              <TextField\r\n                id=\"standard-number\"\r\n                label=\"Minimum area displayed\"\r\n                defaultValue={minDisplayWidth}\r\n                InputProps={{\r\n                  onChange: (event) => setMinDisplayWidth(event.target.value),\r\n                }}\r\n                style={styles.thinButton}\r\n              />\r\n            </div>\r\n            <div style={styles.column}>\r\n              <h3>\r\n                Current areas (cm^2) <br /> (left to right)\r\n              </h3>\r\n              {areas.map((value, i) =>\r\n                parseFloat(value) > minDisplayWidth ? (\r\n                  <b key={i}>{value}</b>\r\n                ) : null\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleAnalysisPage;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js",["105","106"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js",["107"],"const styles = {\r\n  container: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  areasRow: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  column: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n  },\r\n  imageColumn: {\r\n    display: \"flex\",\r\n    flex: 2,\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n  },\r\n  areasColumn: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n    width: \"20%\",\r\n    alignItems: \"center\",\r\n  },\r\n  thinButton: {\r\n    margin: 5,\r\n  },\r\n  cropperContainer: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  borderedContainer: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    border: \"1px black solid\",\r\n    padding: 15,\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    padding: 15,\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\",\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  boxShadow: {\r\n    boxShadow:\r\n      \"0 10px 30px -12px rgba(0, 0, 0, 0.42), 0 4px 25px 0px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  centeredText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  title: {\r\n    color: \"#3C4858\",\r\n    margin: \"1.75rem 0 0.875rem\",\r\n    textDecoration: \"none\",\r\n    fontWeight: \"700\",\r\n    fontFamily: `\"Roboto Slab\", \"Times New Roman\", serif`,\r\n    marginTop: \"0\",\r\n    minHeight: \"32px\",\r\n  },\r\n\r\n  main: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    background: \"#FFFFFF\",\r\n    position: \"relative\",\r\n    zIndex: \"3\",\r\n    fontFamily: `\"Roboto Slab\", \"Times New Roman\", serif`,\r\n  },\r\n\r\n  mainRaised: {\r\n    margin: \"0px 30px 0px\",\r\n    borderRadius: \"6px\",\r\n    boxShadow:\r\n      \"0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n\r\n  images: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    width: \"70%\",\r\n    height: \"70%\",\r\n    alignSelf: \"center\",\r\n  },\r\n  gridImage: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    width: \"33%\",\r\n    alignSelf: \"center\",\r\n  },\r\n\r\n  cropButton: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    width: \"50%\",\r\n    alignSelf: \"center\",\r\n  },\r\n  hsvButton: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    alignSelf: \"center\",\r\n  },\r\n};\r\n\r\nexport default styles;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\constants.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":28,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"118","line":20,"column":10,"nodeType":"116","messageId":"117","endLine":20,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":39,"column":6,"nodeType":"121","endLine":39,"endColumn":8,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":68,"column":9,"nodeType":"116","messageId":"117","endLine":68,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":100,"column":37,"nodeType":"126","messageId":"127","endLine":100,"endColumn":39},{"ruleId":"128","severity":1,"message":"129","line":145,"column":42,"nodeType":"130","endLine":145,"endColumn":61},{"ruleId":"114","severity":1,"message":"131","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},{"ruleId":"114","severity":1,"message":"132","line":56,"column":15,"nodeType":"116","messageId":"117","endLine":56,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":51,"column":3,"nodeType":"135","messageId":"127","endLine":51,"endColumn":12},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],["136"],["137"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'currentImages' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'reanalyzeImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useContext' is defined but never used.","'data' is assigned a value but never used.","no-dupe-keys","Duplicate key 'container'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [props.location.state]",{"range":"141","text":"142"},[1329,1331],"[props.location.state]"]