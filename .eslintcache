[{"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js":"1","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js":"2","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js":"3","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js":"4","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js":"5","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js":"6","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js":"7","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js":"8","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js":"9","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js":"10","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js":"11","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js":"12","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js":"13","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js":"14","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js":"15","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js":"16","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js":"17","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\index.js":"18","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\style.js":"19","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\index.js":"20","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\style.js":"21","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\constants.js":"22"},{"size":941,"mtime":1635647535131,"results":"23","hashOfConfig":"24"},{"size":555,"mtime":1610601607380,"results":"25","hashOfConfig":"24"},{"size":9941,"mtime":1636954599018,"results":"26","hashOfConfig":"24"},{"size":2583,"mtime":1635647535112,"results":"27","hashOfConfig":"24"},{"size":723,"mtime":1636954535585,"results":"28","hashOfConfig":"24"},{"size":2397,"mtime":1635647535113,"results":"29","hashOfConfig":"24"},{"size":2417,"mtime":1610603118085,"results":"30","hashOfConfig":"24"},{"size":1867,"mtime":1610603283550,"results":"31","hashOfConfig":"24"},{"size":439,"mtime":1638003942284,"results":"32","hashOfConfig":"24"},{"size":8773,"mtime":1636953450525,"results":"33","hashOfConfig":"24"},{"size":1842,"mtime":1636953523347,"results":"34","hashOfConfig":"24"},{"size":191,"mtime":1637998431075,"results":"35","hashOfConfig":"24"},{"size":8864,"mtime":1638004444392,"results":"36","hashOfConfig":"24"},{"size":4880,"mtime":1636953674368,"results":"37","hashOfConfig":"24"},{"size":2156,"mtime":1638004273128,"results":"38","hashOfConfig":"24"},{"size":1878,"mtime":1636953519930,"results":"39","hashOfConfig":"24"},{"size":887,"mtime":1638003981532,"results":"40","hashOfConfig":"24"},{"size":891,"mtime":1636953574348,"results":"41","hashOfConfig":"24"},{"size":237,"mtime":1636953569203,"results":"42","hashOfConfig":"24"},{"size":3360,"mtime":1638004002175,"results":"43","hashOfConfig":"24"},{"size":691,"mtime":1638004376855,"results":"44","hashOfConfig":"24"},{"size":69,"mtime":1638003948599,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"jxf2gb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js",[],["94","95"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],["96","97"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js",["98"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport NavBar from \"../NavBar\";\r\n\r\nimport styles from \"./style.js\";\r\n\r\nimport multiAnalysisPageImg from \"../../assets/tutorial/single/multiAnalysisPageImg.PNG\";\r\nimport stepAreas from \"../../assets/tutorial/single/stepAreas.PNG\";\r\nimport stepChooseWidth from \"../../assets/tutorial/single/stepChooseWidth.PNG\";\r\nimport stepGridMasks from \"../../assets/tutorial/single/stepGridMasks.PNG\";\r\nimport stepGridMasks2 from \"../../assets/tutorial/single/stepGridMasks2.PNG\";\r\nimport stepImageMasked from \"../../assets/tutorial/single/stepImageMasked.PNG\";\r\nimport stepManualMask from \"../../assets/tutorial/single/stepManualMask.PNG\";\r\nimport stepMeasure from \"../../assets/tutorial/single/stepMeasure.PNG\";\r\nimport stepPressOk from \"../../assets/tutorial/single/stepPressOk.PNG\";\r\nimport uploadImageImg from \"../../assets/tutorial/single/uploadImageImg.PNG\";\r\nimport stepMultiSelect from \"../../assets/tutorial/single/stepMultiSelect.PNG\";\r\n\r\nimport { base_url } from \"../../constants.js\";\r\n\r\nconst HomePage = (props) => {\r\n  useEffect(() => {\r\n    //Wake up backend server\r\n    //By sending a fetch request to the backend server, this will wake it up\r\n    //Heroku automatically shuts down apps after a long period of inactivity\r\n\r\n    let url = base_url;\r\n    let form = new FormData();\r\n    form.append(\"wakeup\", \"wakeup server\");\r\n    let analyze_options = {\r\n      method: \"POST\",\r\n      body: form,\r\n    };\r\n    fetch(url, analyze_options)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ ...styles.main, ...styles.mainRaised }}>\r\n      <div style={styles.container}>\r\n        <div style={styles.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Home/Tutorial page</h4>\r\n        </div>\r\n        <NavBar history={props.history} />\r\n        <div style={styles.column}>\r\n          <h3>Tutorial</h3>\r\n          <div style={styles.column}>\r\n            <h4>Single-image measurement: </h4>\r\n            First, upload an image\r\n            <img src={uploadImageImg} style={styles.tutorialImage} alt=\"\" />\r\n            Now, you must set what the reference width for the image is. If it's\r\n            automatic (default) it will measure the length of the green line (c)\r\n            and set that to be equal to the referense width (a). If you set it\r\n            to manual (b), it will instead take the width of the image, and set\r\n            that to the reference width (a). This way the software knows how big\r\n            the wound is in real life, and not just in pixels.\r\n            <img src={stepChooseWidth} style={styles.tutorialImage} alt=\"\" />\r\n            Now, we will measure the area of the wounds. It is highly\r\n            recommended to first crop the image (1) to a smaller size that still\r\n            includes the wounds and the green line (for auto-width), so that if\r\n            you need to manually adjust the mask it is easier to see the\r\n            borders. Second, we now select the mask (2) to identify what type of\r\n            wound we're looking for, specifically this changes the HSV color\r\n            ranges for finding what counts as the wound. Finally, press the\r\n            MEASURE AREA button (3) and the areas will be calculated.\r\n            <img src={stepMeasure} style={styles.tutorialImage} alt=\"\" />\r\n            After pressing the button, the image will be sent to a server which\r\n            analyses the image. After a few seconds, the server should finish\r\n            analysis and send it back to your computer- after which there will\r\n            be a popup as shown below. Press ok on the popup.\r\n            <img src={stepPressOk} style={styles.tutorialImage} alt=\"\" />\r\n            Borders are now generated on the image, and the areas of each border\r\n            (from left to right) are calculated and displayed.\r\n            <img src={stepImageMasked} style={styles.tutorialImage} alt=\"\" />\r\n            For most images, the border will be close but not exact. There are\r\n            two ways to make the border closer to the wound. The first (easier)\r\n            is to look at the grid below. The grid automatically adjusts the\r\n            wound mask to stricter and looser settings and displays. The center\r\n            image is the image with the original mask. By clicking on any of the\r\n            images, you will be able to re-analyze the image based on those\r\n            settings.\r\n            <img src={stepGridMasks} style={styles.tutorialImage} alt=\"\" />\r\n            After clicking, and then pressing the ok button like before, you can\r\n            now see that a new grid of stricter and looser masks is generated\r\n            around the image selected in the last step. Similarly as we clicked\r\n            the top left image before, the original settings are now in the\r\n            bottom right image.\r\n            <img src={stepGridMasks2} style={styles.tutorialImage} alt=\"\" />\r\n            You can continue this process until you are satisifed. Similarlly,\r\n            the second way to adjust the wound mask would be to use the manual\r\n            adjustment settings shown below:\r\n            <img src={stepManualMask} style={styles.tutorialImage} alt=\"\" />\r\n            Each of these buttons has instructions showing how it changes the\r\n            wound mask, i.e. changing what counts as a wound for the software.\r\n            This can be used from the beginning, or used along with the grid\r\n            method. Once you're done, the areas are listed in the location\r\n            below, corresponding to the wounds on the image from left to right.\r\n            <img src={stepAreas} style={styles.tutorialImage} alt=\"\" />\r\n            <h4>Multi-image measurement: </h4>\r\n            The process for selecting the initial mask for the multi-image\r\n            measurement method is the same except it uses only automatic width\r\n            measurement. After selecting a mask, upload a zip file containing\r\n            your images, it will process them in alphanumeric order. After\r\n            pressing UPLOAD AND ANALYZE ZIP FILE it will immedietly send the\r\n            file to the server and begin analyzing. This will generally take\r\n            longer than single-image measurement because there are more images\r\n            in the zip file to analyze.\r\n            <img\r\n              src={multiAnalysisPageImg}\r\n              style={styles.tutorialImage}\r\n              alt=\"\"\r\n            />\r\n            Once you press ok from the popup, you will then see all the images.\r\n            They are listed in order, using the green line as a width reference.\r\n            The areas are listed for the wounds in order of left-to-right just\r\n            like in single analysis. For most images, the mask will not be\r\n            exactly correct, so you can click on the image itself in order to\r\n            automatically go to the single-image measurement page with that\r\n            image automatically transfered.\r\n            <img src={stepMultiSelect} style={styles.tutorialImage} alt=\"\" />\r\n            <h4>Warnings/Closure</h4>\r\n            <li>\r\n              Make sure the width of the green line is correctly measured, as\r\n              that is what is being used as reference for the wound area.\r\n              Depending on lighting conditions, the software may not correctly\r\n              process all of the green line.\r\n            </li>\r\n            <li>\r\n              For some reason, if you've already send a zip file for analysis\r\n              and want to send another zip file, you need to first reload the\r\n              page. I've tried tracking down this bug for hours and hours and\r\n              I've been unable to solve it, since it's not critical, I've put it\r\n              on the backlog while I work on other more critical tasks.\r\n            </li>\r\n            <li>\r\n              Since this web application is hosted for free on Heroku, after a\r\n              long period of inactivity the frontend app and backend server will\r\n              shutdown, so if you load the page after a long time it will likely\r\n              give you an error at first. Don't worry, this is just because the\r\n              server is stopped. After you tried to open the page (url request),\r\n              it asked Heroku to restart the server and by the time it gives you\r\n              the error, it has already started up again and you can just reload\r\n              the page and you'll see the app.\r\n            </li>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js",["99","100","101"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js",["102","103","104"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from \"./style.js\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\nimport NavBar from \"../NavBar\";\r\n\r\nimport { base_url, base_ml_url } from \"../../constants.js\";\r\n\r\nimport { Context } from \"../context\";\r\n\r\nfunction MultiAnalysisPage(props) {\r\n  const { settings, setSettings, zipImgList, setZipImgList } =\r\n    React.useContext(Context);\r\n\r\n  useEffect(() => {\r\n    let url = base_url;\r\n    let ml_url = base_ml_url;\r\n    //const url = \"/\"\r\n    let form = new FormData();\r\n    form.append(\"wakeup\", \"wakeup server\");\r\n    let analyze_options = {\r\n      method: \"POST\",\r\n      body: form,\r\n    };\r\n    fetch(url, analyze_options)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    fetch(ml_url, analyze_options)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const uploadDayZip = async (event) => {\r\n    let zipFile = event.target.files[0];\r\n    if (zipFile) {\r\n      let url = base_url + \"/zipMeasure\";\r\n      let form = new FormData();\r\n      form.append(\"file\", zipFile);\r\n      form.append(\"width\", settings.width);\r\n      form.append(\"settings\", settings);\r\n\r\n      //Then analyze\r\n      const analyze_options = {\r\n        method: \"POST\",\r\n        body: form,\r\n      };\r\n      fetch(url, analyze_options)\r\n        .then((response) => {\r\n          if (!response.ok) throw Error(response.statusText);\r\n          return response.json();\r\n        })\r\n        .then((imgList) => {\r\n          alert(\"Images analyzed\");\r\n          setZipImgList(imgList);\r\n        })\r\n        .catch((error) => {\r\n          if (error instanceof TypeError) {\r\n            alert(\"Too many images, make a smaller Zip file\");\r\n          } else {\r\n            console.log(error);\r\n            alert(\"Unknown error, let Alex know about this. Error:\", error);\r\n          }\r\n        });\r\n    } else {\r\n      alert(\"Please upload an zip file\");\r\n    }\r\n  };\r\n\r\n  const reanalyzeImage = async (obj, i) => {\r\n    obj[\"id\"] = i;\r\n    props.history.push({\r\n      pathname: \"/single\",\r\n      state: { obj: obj },\r\n    });\r\n  };\r\n\r\n  const handleWidthChange = (event) => {\r\n    setSettings((prevSettings) => ({\r\n      ...prevSettings,\r\n      width: event.target.value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...styles.main, ...styles.mainRaised }}>\r\n      <div style={styles.container}>\r\n        <div style={styles.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Multi-image measurement</h4>\r\n        </div>\r\n        <NavBar history={props.history} />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          component=\"label\"\r\n          color=\"primary\"\r\n          style={styles.analyzeButton}\r\n        >\r\n          Upload and analyze ZIP file\r\n          <input type=\"file\" name=\"myImage\" hidden onChange={uploadDayZip} />\r\n        </Button>\r\n        <div style={{ height: 20 }} />\r\n        <Tooltip\r\n          title=\"This is the length of the green line\"\r\n          placement=\"top-start\"\r\n        >\r\n          <TextField\r\n            id=\"standard-number\"\r\n            label=\"Enter reference width (cm)\"\r\n            defaultValue={settings.width}\r\n            InputProps={{\r\n              onChange: handleWidthChange,\r\n            }}\r\n          />\r\n        </Tooltip>\r\n        <MaskSelector />\r\n        <div style={styles.column}>\r\n          {zipImgList.map((obj, i) => (\r\n            <div key={i} id={\"zipImg\" + i}>\r\n              {obj[\"error\"] === false ? (\r\n                <div style={styles.row}>\r\n                  <img\r\n                    src={obj[\"drawn_image\"]}\r\n                    style={styles.colImage}\r\n                    alt=\"\"\r\n                    onClick={() => reanalyzeImage(obj, i)}\r\n                  />\r\n                  <div style={styles.column}>\r\n                    <h3>Image: {i}</h3>\r\n                    <h3>Areas</h3>\r\n                    {obj[\"areas\"].map((area) => (\r\n                      <h5>{area}cm^2</h5>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div style={styles.row}>\r\n                  <img\r\n                    src={obj[\"orig\"]}\r\n                    style={styles.colImage}\r\n                    alt=\"\"\r\n                    onClick={() => reanalyzeImage(obj, i)}\r\n                  />\r\n                  <p>Error: {obj[\"error_message\"]}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiAnalysisPage;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js",["105"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\constants.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"110"},{"ruleId":"108","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":1,"column":28,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"117","line":39,"column":6,"nodeType":"118","endLine":39,"endColumn":8,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":100,"column":37,"nodeType":"122","messageId":"123","endLine":100,"endColumn":39},{"ruleId":"124","severity":1,"message":"125","line":145,"column":42,"nodeType":"126","endLine":145,"endColumn":61},{"ruleId":"112","severity":1,"message":"127","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":1,"column":40,"nodeType":"114","messageId":"115","endLine":1,"endColumn":48},{"ruleId":"112","severity":1,"message":"128","line":3,"column":18,"nodeType":"114","messageId":"115","endLine":3,"endColumn":26},{"ruleId":"129","severity":1,"message":"130","line":38,"column":3,"nodeType":"131","messageId":"123","endLine":38,"endColumn":12},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],["132"],["133"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["134"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useContext' is defined but never used.","'Checkbox' is defined but never used.","no-dupe-keys","Duplicate key 'container'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [props.location.state]",{"range":"137","text":"138"},[1329,1331],"[props.location.state]"]