[{"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js":"1","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js":"2","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js":"3","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js":"4","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js":"5","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js":"6","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js":"7","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js":"8","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js":"9","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js":"10","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js":"11","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js":"12","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js":"13","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js":"14","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js":"15","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js":"16","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js":"17","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\index.js":"18","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\style.js":"19","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\index.js":"20","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\style.js":"21","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\constants.js":"22"},{"size":941,"mtime":1635647535131,"results":"23","hashOfConfig":"24"},{"size":555,"mtime":1610601607380,"results":"25","hashOfConfig":"24"},{"size":9633,"mtime":1644217482738,"results":"26","hashOfConfig":"24"},{"size":2583,"mtime":1635647535112,"results":"27","hashOfConfig":"24"},{"size":723,"mtime":1636954535585,"results":"28","hashOfConfig":"24"},{"size":2397,"mtime":1635647535113,"results":"29","hashOfConfig":"24"},{"size":2417,"mtime":1610603118085,"results":"30","hashOfConfig":"24"},{"size":1867,"mtime":1610603283550,"results":"31","hashOfConfig":"24"},{"size":439,"mtime":1638003942284,"results":"32","hashOfConfig":"24"},{"size":10819,"mtime":1646623313822,"results":"33","hashOfConfig":"24"},{"size":2040,"mtime":1646622112476,"results":"34","hashOfConfig":"24"},{"size":237,"mtime":1646621317535,"results":"35","hashOfConfig":"24"},{"size":8269,"mtime":1644218483023,"results":"36","hashOfConfig":"24"},{"size":5888,"mtime":1644222222099,"results":"37","hashOfConfig":"24"},{"size":2421,"mtime":1638085286467,"results":"38","hashOfConfig":"24"},{"size":1917,"mtime":1644222096342,"results":"39","hashOfConfig":"24"},{"size":887,"mtime":1638003981532,"results":"40","hashOfConfig":"24"},{"size":891,"mtime":1644219898193,"results":"41","hashOfConfig":"24"},{"size":237,"mtime":1636953569203,"results":"42","hashOfConfig":"24"},{"size":3360,"mtime":1638004002175,"results":"43","hashOfConfig":"24"},{"size":691,"mtime":1638004376855,"results":"44","hashOfConfig":"24"},{"size":69,"mtime":1638003948599,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"jxf2gb",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js",[],["95","96"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],["97","98"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js",["99"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js",["100","101","102","103","104"],"import React, { useEffect, useState } from \"react\";\r\nimport Cropper from \"../ImageCropper/imageCropper\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from \"@material-ui/core\";\r\n\r\nimport styles from \"./style.js\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\nimport LineMaskSelector from \"../LineMaskSelector/index.js\";\r\nimport NavBar from \"../NavBar\";\r\n\r\nimport { base_url } from \"../../constants.js\";\r\n\r\nimport { Context } from \"../context\";\r\n\r\nfunction SingleAnalysisPage(props) {\r\n  const { settings, setSettings } = React.useContext(Context);\r\n  const [currentImage, setCurrentImage] = useState();\r\n  const [originalImage, setOriginalImage] = useState();\r\n  const [currentImages, setCurrentImages] = useState();\r\n  const [useCrop, setUseCrop] = useState(false);\r\n  const [areas, setAreas] = useState([]);\r\n  const [jumpHeading, setJumpHeading] = useState();\r\n  const [minDisplayWidth, setMinDisplayWidth] = useState(0.1);\r\n\r\n  useEffect(() => {\r\n    if (props.location.state != null) {\r\n      const obj = props.location.state.obj;\r\n      if (obj != null) {\r\n        if (obj[\"drawn_image\"]) {\r\n          setCurrentImage(obj[\"drawn_image\"]);\r\n        } else {\r\n          setCurrentImage(obj[\"orig\"]);\r\n        }\r\n        setOriginalImage(obj[\"orig\"]);\r\n        setJumpHeading(obj[\"id\"]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const getBase64 = (file, cb) => {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n      cb(reader.result);\r\n    };\r\n    reader.onerror = function (error) {\r\n      console.log(\"Error: \", error);\r\n    };\r\n  };\r\n\r\n  const completeCrop = (image) => {\r\n    setUseCrop(false);\r\n    setCurrentImage(image);\r\n    setOriginalImage(image);\r\n  };\r\n\r\n  const onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let imgFile = event.target.files[0];\r\n      getBase64(imgFile, (result) => {\r\n        setCurrentImage(result);\r\n        setOriginalImage(result);\r\n      });\r\n    }\r\n  };\r\n\r\n  const reanalyzeImage = async (obj) => {\r\n    let newSettings = {\r\n      ...settings,\r\n      lowerBound: obj[\"lowerBound\"],\r\n      upperBound: obj[\"upperBound\"],\r\n      autoMask: false,\r\n    };\r\n    setSettings(newSettings);\r\n    analyzeImage(newSettings);\r\n  };\r\n\r\n  const analyzeImage = async () => {\r\n    if (currentImage && settings.width) {\r\n      const url = base_url + \"/measure\";\r\n\r\n      const data = {\r\n        base64: originalImage,\r\n        settings: settings,\r\n      };\r\n\r\n      fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) throw Error(response.statusText);\r\n          return response.json();\r\n        })\r\n        .then((matrix) => {\r\n          if (matrix[1][1][\"error\"] == false) {\r\n            setCurrentImage(matrix[1][1][\"drawn_image\"]);\r\n            setOriginalImage(matrix[1][1][\"orig\"]);\r\n            setCurrentImages(matrix);\r\n            setAreas(matrix[1][1][\"areas\"]);\r\n            alert(\"Images analyzed\");\r\n          } else {\r\n            alert(matrix[1][1][\"error_message\"]);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          alert(error);\r\n        });\r\n    } else if (currentImage && !settings.width) {\r\n      alert(\"Please specify an image width\");\r\n    } else if (!currentImage && settings.width) {\r\n      alert(\"Please upload an image\");\r\n    } else {\r\n      alert(\"Please upload an image and specify it's real width\");\r\n    }\r\n  };\r\n\r\n  const handleWidthChange = (event) => {\r\n    setSettings((prevSettings) => ({\r\n      ...prevSettings,\r\n      width: parseFloat(event.target.value),\r\n    }));\r\n  };\r\n\r\n  const handleCropChange = () => {\r\n    setUseCrop(true);\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...styles.main, ...styles.mainRaised }}>\r\n      <div style={styles.container}>\r\n        <div style={styles.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Single-image measurement</h4>\r\n        </div>\r\n        <NavBar history={props.history} />\r\n        <div style={styles.borderedContainer}>\r\n          <div style={styles.row}>\r\n            <div style={styles.column}>\r\n              <div style={styles.button} style={{ flex: 1 }}>\r\n                <h3>Upload Image</h3>\r\n                <Button variant=\"contained\" component=\"label\">\r\n                  Upload Image\r\n                  <input\r\n                    type=\"file\"\r\n                    name=\"myImage\"\r\n                    hidden\r\n                    onChange={onImageChange}\r\n                  />\r\n                </Button>\r\n              </div>\r\n              <div style={styles.column}>\r\n                <div style={{ height: 40 }} />\r\n                <Tooltip\r\n                  title=\"If width is set to manual, the width of the image will be used as reference, otherwies the width of the green line will be used.\"\r\n                  placement=\"top-start\"\r\n                >\r\n                  <div style={styles.container}>\r\n                    <TextField\r\n                      id=\"standard-number\"\r\n                      label=\"Enter reference width (cm)\"\r\n                      defaultValue={settings.width}\r\n                      InputProps={{\r\n                        onChange: handleWidthChange,\r\n                      }}\r\n                    />\r\n                    <div style={styles.row}>\r\n                      <Checkbox\r\n                        checked={!settings.autoWidth}\r\n                        onChange={() =>\r\n                          setSettings((prevSettings) => ({\r\n                            ...prevSettings,\r\n                            autoWidth: !prevSettings[\"autoWidth\"],\r\n                          }))\r\n                        }\r\n                        value=\"autoMask\"\r\n                      />\r\n                      <div style={styles.centeredText}>Set width to manual</div>\r\n                    </div>\r\n                  </div>\r\n                </Tooltip>\r\n                {settings.autoWidth ? <LineMaskSelector /> : null}\r\n              </div>\r\n            </div>\r\n\r\n            <div style={styles.imageColumn}>\r\n              {useCrop ? (\r\n                <Cropper\r\n                  currentImage={originalImage}\r\n                  completeCrop={completeCrop}\r\n                />\r\n              ) : (\r\n                <>\r\n                  <h3>Image {jumpHeading}</h3>\r\n                  <div style={styles.column}>\r\n                    <img src={currentImage} style={styles.images} alt=\"\" />\r\n                    <Button\r\n                      style={styles.cropButton}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleCropChange}\r\n                    >\r\n                      Crop Image\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <MaskSelector />\r\n        <div style={styles.borderedContainer}>\r\n          <div style={styles.areasRow}>\r\n            <div style={styles.column}>\r\n              <h2>Areas</h2>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={analyzeImage}\r\n                style={styles.thinButton}\r\n              >\r\n                Measure area\r\n              </Button>\r\n              <TextField\r\n                id=\"standard-number\"\r\n                label=\"Minimum area displayed\"\r\n                defaultValue={minDisplayWidth}\r\n                InputProps={{\r\n                  onChange: (event) => setMinDisplayWidth(event.target.value),\r\n                }}\r\n                style={styles.thinButton}\r\n              />\r\n            </div>\r\n            <div style={styles.column}>\r\n              <h3>\r\n                Current areas (cm^2) <br /> (left to right)\r\n              </h3>\r\n              {areas.map((value, i) =>\r\n                parseFloat(value) > minDisplayWidth ? (\r\n                  <b key={i}>{value}</b>\r\n                ) : null\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleAnalysisPage;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js",["105","106"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { Button, Tooltip, TextField } from \"@material-ui/core\";\r\nimport JSZip from \"jszip\";\r\nimport styles from \"./style.js\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\nimport NavBar from \"../NavBar\";\r\n\r\nimport { base_url, base_ml_url } from \"../../constants.js\";\r\n\r\nimport { Context } from \"../context\";\r\n\r\nfunction MultiAnalysisPage(props) {\r\n  const { settings, setSettings, zipImgList, setZipImgList } =\r\n    React.useContext(Context);\r\n\r\n  const [minDisplayWidth, setMinDisplayWidth] = useState(0.1);\r\n  useEffect(() => {\r\n    let url = base_url;\r\n    let ml_url = base_ml_url;\r\n    const data = {\r\n      wakeup: \"wakeupserver\",\r\n    };\r\n    let analyze_options = {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n    };\r\n    fetch(url, analyze_options)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .catch((error) => console.log(error));\r\n\r\n    fetch(ml_url, analyze_options)\r\n      .then((response) => {\r\n        if (!response.ok) throw Error(response.statusText);\r\n        return response.json();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }, []);\r\n\r\n  const uploadMultiple = async (event) => {\r\n    const zip = new JSZip();\r\n\r\n    let files = event.target.files;\r\n    if (files) {\r\n      for (let file = 0; file < files.length; file++) {\r\n        // Zip file with the file name.\r\n        zip.file(files[file].name, files[file]);\r\n      }\r\n      zip.generateAsync({ type: \"blob\" }).then((content) => {\r\n        let url = base_url + \"/zipMeasure\";\r\n\r\n        const data = {\r\n          zip: content,\r\n          settings: settings,\r\n        };\r\n\r\n        let form = new FormData();\r\n        form.append(\"file\", content);\r\n        form.append(\"settings\", JSON.stringify(settings));\r\n\r\n        //Then analyze\r\n        const analyze_options = {\r\n          method: \"POST\",\r\n          body: form,\r\n        };\r\n\r\n        fetch(url, analyze_options)\r\n          .then((response) => {\r\n            if (!response.ok) throw Error(response.statusText);\r\n            return response.json();\r\n          })\r\n          .then((imgList) => {\r\n            alert(\"Images analyzed\");\r\n            setZipImgList(imgList);\r\n          })\r\n          .catch((error) => {\r\n            if (error instanceof TypeError) {\r\n              alert(\"Too many images, make a smaller Zip file\");\r\n            } else {\r\n              console.log(error);\r\n              alert(\"Unknown error, let Alex know about this. Error:\", error);\r\n            }\r\n          });\r\n      });\r\n    } else {\r\n      alert(\"Please upload an zip file\");\r\n    }\r\n  };\r\n\r\n  const reanalyzeImage = async (obj, i) => {\r\n    obj[\"id\"] = i;\r\n    props.history.push({\r\n      pathname: \"/single\",\r\n      state: { obj: obj },\r\n    });\r\n  };\r\n\r\n  const handleWidthChange = (event) => {\r\n    setSettings((prevSettings) => ({\r\n      ...prevSettings,\r\n      width: event.target.value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div style={{ ...styles.main, ...styles.mainRaised }}>\r\n      <div style={styles.container}>\r\n        <div style={styles.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Multi-image measurement</h4>\r\n        </div>\r\n        <NavBar history={props.history} />\r\n\r\n        <MaskSelector />\r\n\r\n        <div style={{ height: 20 }} />\r\n        <Tooltip\r\n          title=\"This is the length of the green line\"\r\n          placement=\"top-start\"\r\n        >\r\n          <TextField\r\n            id=\"standard-number\"\r\n            label=\"Enter reference width (cm)\"\r\n            defaultValue={settings.width}\r\n            InputProps={{\r\n              onChange: handleWidthChange,\r\n            }}\r\n          />\r\n        </Tooltip>\r\n        <TextField\r\n          id=\"standard-number\"\r\n          label=\"Minimum area displayed\"\r\n          defaultValue={minDisplayWidth}\r\n          InputProps={{\r\n            onChange: (event) => setMinDisplayWidth(event.target.value),\r\n          }}\r\n          style={styles.thinButton}\r\n        />\r\n        <div style={{ height: 20 }} />\r\n        <Button\r\n          variant=\"contained\"\r\n          component=\"label\"\r\n          color=\"primary\"\r\n          style={styles.analyzeButton}\r\n        >\r\n          Upload and analyze multiple files\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            name=\"myImage\"\r\n            hidden\r\n            onChange={uploadMultiple}\r\n          />\r\n        </Button>\r\n        <div style={{ height: 20 }} />\r\n        <div style={styles.column}>\r\n          {zipImgList.map((obj, i) => (\r\n            <div key={i} id={\"zipImg\" + i}>\r\n              {obj[\"error\"] === false ? (\r\n                <div style={styles.row}>\r\n                  <img\r\n                    src={obj[\"drawn_image\"]}\r\n                    style={styles.colImage}\r\n                    alt=\"\"\r\n                    onClick={() => reanalyzeImage(obj, i)}\r\n                  />\r\n                  <div style={styles.column}>\r\n                    <h3>Image: {i}</h3>\r\n                    <h3>Areas</h3>\r\n                    {obj[\"areas\"].map((value, i) =>\r\n                      parseFloat(value) > minDisplayWidth ? (\r\n                        <b key={i}>{value}</b>\r\n                      ) : null\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div style={styles.row}>\r\n                  <img\r\n                    src={obj[\"orig\"]}\r\n                    style={styles.colImage}\r\n                    alt=\"\"\r\n                    onClick={() => reanalyzeImage(obj, i)}\r\n                  />\r\n                  <p>Error: {obj[\"error_message\"]}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiAnalysisPage;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js",["107"],"const styles = {\r\n  container: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  areasRow: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  column: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n  },\r\n  imageColumn: {\r\n    display: \"flex\",\r\n    flex: 2,\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n  },\r\n  areasColumn: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n    width: \"20%\",\r\n    alignItems: \"center\",\r\n  },\r\n  thinButton: {\r\n    margin: 5,\r\n  },\r\n  cropperContainer: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  borderedContainer: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    border: \"1px black solid\",\r\n    padding: 15,\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    padding: 15,\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\",\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n  boxShadow: {\r\n    boxShadow:\r\n      \"0 10px 30px -12px rgba(0, 0, 0, 0.42), 0 4px 25px 0px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n  centeredText: {\r\n    alignSelf: \"center\",\r\n  },\r\n  title: {\r\n    color: \"#3C4858\",\r\n    margin: \"1.75rem 0 0.875rem\",\r\n    textDecoration: \"none\",\r\n    fontWeight: \"700\",\r\n    fontFamily: `\"Roboto Slab\", \"Times New Roman\", serif`,\r\n    marginTop: \"0\",\r\n    minHeight: \"32px\",\r\n  },\r\n\r\n  main: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    background: \"#FFFFFF\",\r\n    position: \"relative\",\r\n    zIndex: \"3\",\r\n    fontFamily: `\"Roboto Slab\", \"Times New Roman\", serif`,\r\n  },\r\n\r\n  mainRaised: {\r\n    margin: \"0px 30px 0px\",\r\n    borderRadius: \"6px\",\r\n    boxShadow:\r\n      \"0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n\r\n  images: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    width: \"70%\",\r\n    height: \"70%\",\r\n    alignSelf: \"center\",\r\n  },\r\n  gridImage: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    width: \"33%\",\r\n    alignSelf: \"center\",\r\n  },\r\n\r\n  cropButton: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    width: \"50%\",\r\n    alignSelf: \"center\",\r\n  },\r\n  hsvButton: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    alignSelf: \"center\",\r\n  },\r\n};\r\n\r\nexport default styles;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\NavBar\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\index.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\LineMaskSelector\\constants.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":28,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"118","line":20,"column":10,"nodeType":"116","messageId":"117","endLine":20,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":39,"column":6,"nodeType":"121","endLine":39,"endColumn":8,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":68,"column":9,"nodeType":"116","messageId":"117","endLine":68,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":100,"column":37,"nodeType":"126","messageId":"127","endLine":100,"endColumn":39},{"ruleId":"128","severity":1,"message":"129","line":145,"column":42,"nodeType":"130","endLine":145,"endColumn":61},{"ruleId":"114","severity":1,"message":"131","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":27},{"ruleId":"114","severity":1,"message":"132","line":56,"column":15,"nodeType":"116","messageId":"117","endLine":56,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":51,"column":3,"nodeType":"135","messageId":"127","endLine":51,"endColumn":12},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],["136"],["137"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'currentImages' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["138"],"'reanalyzeImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useContext' is defined but never used.","'data' is assigned a value but never used.","no-dupe-keys","Duplicate key 'container'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [props.location.state]",{"range":"141","text":"142"},[1329,1331],"[props.location.state]"]