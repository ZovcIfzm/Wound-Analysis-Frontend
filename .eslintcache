[{"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js":"1","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js":"2","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js":"3","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js":"4","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js":"5","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js":"6","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js":"7","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js":"8","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\index.js":"9","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\style.js":"10","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js":"11","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js":"12","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js":"13","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js":"14","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js":"15","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js":"16","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js":"17","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js":"18","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js":"19"},{"size":918,"mtime":1621694335096,"results":"20","hashOfConfig":"21"},{"size":555,"mtime":1610601607380,"results":"22","hashOfConfig":"21"},{"size":12123,"mtime":1621694745017,"results":"23","hashOfConfig":"21"},{"size":2598,"mtime":1615075799191,"results":"24","hashOfConfig":"21"},{"size":546,"mtime":1621694600553,"results":"25","hashOfConfig":"21"},{"size":2397,"mtime":1615075793867,"results":"26","hashOfConfig":"21"},{"size":2417,"mtime":1610603118085,"results":"27","hashOfConfig":"21"},{"size":1867,"mtime":1610603283550,"results":"28","hashOfConfig":"21"},{"size":1651,"mtime":1617500171951,"results":"29","hashOfConfig":"21"},{"size":488,"mtime":1615092640698,"results":"30","hashOfConfig":"21"},{"size":932,"mtime":1615083272156,"results":"31","hashOfConfig":"21"},{"size":11903,"mtime":1621697177413,"results":"32","hashOfConfig":"21"},{"size":2230,"mtime":1620987087736,"results":"33","hashOfConfig":"21"},{"size":188,"mtime":1624585910878,"results":"34","hashOfConfig":"21"},{"size":10075,"mtime":1623042276360,"results":"35","hashOfConfig":"21"},{"size":8290,"mtime":1624585987158,"results":"36","hashOfConfig":"21"},{"size":1928,"mtime":1620982888755,"results":"37","hashOfConfig":"21"},{"size":2259,"mtime":1621694538028,"results":"38","hashOfConfig":"21"},{"size":1619,"mtime":1623039342752,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"jxf2gb",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\index.js",[],["85","86"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\App.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\index.js",["87","88"],"import React, { useContext, useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport style from \"./style.js\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport maskAImg from \"../../assets/maskAImg.JPG\"\r\nimport maskBImg from \"../../assets/maskBImg.JPG\"\r\nimport maskCImg from \"../../assets/maskCImg.JPG\"\r\nimport maskDImg from \"../../assets/maskDImg.JPG\"\r\nimport maskEImg from \"../../assets/maskEImg.JPG\"\r\n\r\nimport { maskConstants } from \"./constants.js\"\r\n\r\nimport { Context } from \"../context\";\r\n\r\nconst useStyles = makeStyles(style);\r\n\r\nfunction MaskSelector(props) {\r\n  \r\n  const { lowerMaskOne, setLowerMaskOne, lowerMaskTwo, setLowerMaskTwo, upperMaskOne, setUpperMaskOne, upperMaskTwo, setUpperMaskTwo, setMask } = React.useContext(Context)\r\n  \r\n  const classes = useStyles();\r\n  const placeholder = \"hue, sat, val\";\r\n  const [isManualMask, setIsManualMask] = useState(false);\r\n\r\n  const modifyLowerSat = (val) => {\r\n    let newLowerMaskOne = [...lowerMaskOne];\r\n    let newLowerMaskTwo = [...lowerMaskTwo];\r\n    newLowerMaskOne[1] += val;\r\n    newLowerMaskTwo[1] += val;    \r\n\r\n    if (newLowerMaskOne[1] > 255){\r\n        newLowerMaskOne[1] = 255;\r\n    }\r\n    if (newLowerMaskTwo[1] > 255){\r\n        newLowerMaskTwo[1] = 255;\r\n    }\r\n    if (newLowerMaskOne[1] > upperMaskOne[1] || newLowerMaskTwo[1] > upperMaskTwo[1]){\r\n        alert(\"Cannot increase lower sat above upper sat\")\r\n    }\r\n    else{\r\n      setLowerMaskOne(newLowerMaskOne)\r\n      setLowerMaskTwo(newLowerMaskTwo)\r\n    }\r\n  }\r\n  const modifyUpperSat = (val) => {\r\n    let newUpperMaskOne = [...upperMaskOne];\r\n    let newUpperMaskTwo = [...upperMaskTwo];\r\n    newUpperMaskOne[1] += val;    \r\n    newUpperMaskTwo[1] += val;\r\n\r\n    if (newUpperMaskOne[1] > 255){\r\n        newUpperMaskOne[1] = 255;\r\n    }\r\n    if (newUpperMaskTwo[1] > 255){\r\n        newUpperMaskTwo[1] = 255;\r\n    }\r\n    if (newUpperMaskOne[1] < lowerMaskOne[1] || newUpperMaskTwo[1] < lowerMaskTwo[1]){\r\n        alert(\"Cannot lower upper sat below lower sat\")\r\n    }\r\n    else{\r\n      setUpperMaskOne(newUpperMaskOne)\r\n      setUpperMaskTwo(newUpperMaskTwo)\r\n    }\r\n  }\r\n\r\n  const modifyLowerVal = (val) => {\r\n    let newLowerMaskOne = [...lowerMaskOne];\r\n    let newLowerMaskTwo = [...lowerMaskTwo];\r\n    newLowerMaskOne[2] += val;\r\n    newLowerMaskTwo[2] += val;    \r\n\r\n    if (newLowerMaskOne[2] > 255){\r\n        newLowerMaskOne[2] = 255;\r\n    }\r\n    if (newLowerMaskTwo[2] > 255){\r\n        newLowerMaskTwo[2] = 255;\r\n    }\r\n    if (newLowerMaskOne[2] > upperMaskOne[2] || newLowerMaskTwo[2] > upperMaskTwo[2]){\r\n        alert(\"Cannot increase lower val above upper val\")\r\n    }\r\n    else{\r\n      setLowerMaskOne(newLowerMaskOne)\r\n      setLowerMaskTwo(newLowerMaskTwo)\r\n    }\r\n  }\r\n  const modifyUpperVal = (val) => {\r\n    let newUpperMaskOne = [...upperMaskOne];\r\n    let newUpperMaskTwo = [...upperMaskTwo];\r\n    newUpperMaskOne[2] += val;    \r\n    newUpperMaskTwo[2] += val;\r\n\r\n    if (newUpperMaskOne[2] > 255){\r\n        newUpperMaskOne[2] = 255;\r\n    }\r\n    if (newUpperMaskTwo[2] > 255){\r\n        newUpperMaskTwo[2] = 255;\r\n    }\r\n    if (newUpperMaskOne[2] < lowerMaskOne[2] || newUpperMaskTwo[2] < lowerMaskTwo[2]){\r\n        alert(\"Cannot lower upper val below lower val\")\r\n    }\r\n    else{\r\n      setUpperMaskOne(newUpperMaskOne)\r\n      setUpperMaskTwo(newUpperMaskTwo)\r\n    }\r\n  }\r\n\r\n  const modifyHueRange = (val) => {    \r\n      let newLowerMaskTwo = [...lowerMaskTwo];\r\n      let newUpperMaskOne = [...upperMaskOne];\r\n      \r\n      newLowerMaskTwo[0] -= val;    \r\n      newUpperMaskOne[0] += val;    \r\n\r\n      if (newLowerMaskTwo[0] < 0){\r\n          newLowerMaskTwo[0] = 0;\r\n      }\r\n      if (newUpperMaskOne[0] > 180){\r\n          newUpperMaskOne[0] = 180;\r\n      }\r\n\r\n      setLowerMaskTwo(newLowerMaskTwo)\r\n      setUpperMaskOne(newUpperMaskOne)\r\n  }\r\n\r\n  const handleLowerMaskOneChange = (event) => {\r\n    setLowerMaskOne(event.target.value)\r\n  };\r\n\r\n  const handleLowerMaskTwoChange = (event) => {\r\n    setLowerMaskTwo(event.target.value)\r\n  };\r\n\r\n  const handleUpperMaskOneChange = (event) => {\r\n    setUpperMaskOne(event.target.value)\r\n  };\r\n\r\n  const handleUpperMaskTwoChange = (event) => {\r\n    setUpperMaskTwo(event.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.column}>\r\n      <div style={{\"height\":20}}/>\r\n      <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => setIsManualMask(!isManualMask)}\r\n          >\r\n          Change mask type\r\n      </Button>\r\n      { isManualMask ?\r\n        <div>\r\n          <h4>Selecting mask manually</h4>\r\n          <div className={classes.row}>\r\n            <div className={classes.column}>\r\n              <div className={classes.row}>\r\n                <TextField\r\n                  label=\"HSV Lower Range 1\"\r\n                  className={classes.textField}\r\n                  value={lowerMaskOne}\r\n                  placeholder={placeholder}\r\n                  onChange={handleLowerMaskOneChange}\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  label=\"HSV Lower Range 2\"\r\n                  className={classes.textField}\r\n                  value={lowerMaskTwo}\r\n                  placeholder={placeholder}\r\n                  onChange={handleLowerMaskTwoChange}\r\n                  margin=\"normal\"\r\n                />\r\n              </div>\r\n              <div className={classes.row}>\r\n                <TextField\r\n                  label=\"HSV Upper Range 1\"\r\n                  className={classes.textField}\r\n                  value={upperMaskOne}\r\n                  placeholder={placeholder}\r\n                  onChange={handleUpperMaskOneChange}\r\n                  margin=\"normal\"\r\n                />\r\n                <TextField\r\n                  label=\"HSV Upper Range 2\"\r\n                  className={classes.textField}\r\n                  value={upperMaskTwo}\r\n                  placeholder={placeholder}\r\n                  onChange={handleUpperMaskTwoChange}\r\n                  margin=\"normal\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <div className={classes.column}>\r\n              <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setMask(maskConstants[\"A\"])}\r\n                >\r\n                  Select Lightest Mask\r\n              </Button>\r\n              Best for:\r\n              <img\r\n                src={maskAImg}\r\n                className={classes.exampleImage}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className={classes.column}>\r\n              <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setMask(maskConstants[\"B\"])}\r\n                >\r\n                  Select Light Mask\r\n              </Button>\r\n              Best for:\r\n              <img\r\n                src={maskBImg}\r\n                className={classes.exampleImage}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className={classes.column}>\r\n              <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setMask(maskConstants[\"C\"])}\r\n                >\r\n                  Select Standard Mask\r\n              </Button>\r\n              Best for:\r\n              <img\r\n                src={maskCImg}\r\n                className={classes.exampleImage}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className={classes.column}>\r\n              <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setMask(maskConstants[\"D\"])}\r\n                >\r\n                  Select Darker Mask\r\n              </Button>\r\n              Best for:\r\n              <img\r\n                src={maskDImg}\r\n                className={classes.exampleImage}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n            <div className={classes.column}>\r\n              <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => setMask(maskConstants[\"E\"])}\r\n                >\r\n                  Select Darkest Mask\r\n              </Button>\r\n              Best for:\r\n              <img\r\n                src={maskEImg}\r\n                className={classes.exampleImage}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div style={{\"height\": 10}}/>\r\n          <div className={classes.row}>\r\n              <div className={classes.column}>\r\n                  <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"maroon\"}}\r\n                  onClick={()=>modifyLowerSat(5)}\r\n                  className={classes.hsvButton}\r\n                  >\r\n                  Look for redder wounds (+sat)\r\n                  </Button>\r\n                  <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"pink\"}}\r\n                  onClick={()=>modifyLowerSat(-5)}\r\n                  className={classes.hsvButton}\r\n                  >\r\n                  Look for pinker wounds (-sat)\r\n                  </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                  <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"#800200\"}}\r\n                  onClick={()=>modifyLowerVal(5)}\r\n                  className={classes.hsvButton}\r\n                  >\r\n                  Look for brighter wounds (+val)\r\n                  </Button>\r\n                  <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{\"backgroundColor\": \"black\"}}\r\n                  onClick={()=>modifyLowerVal(-5)}\r\n                  className={classes.hsvButton}\r\n                  >\r\n                  Look for darker wounds (-val)\r\n                  </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                  <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      style={{\"backgroundColor\": \"green\"}}\r\n                      onClick={()=>modifyUpperVal(5)}\r\n                      className={classes.hsvButton}\r\n                  >\r\n                      Include more skin (+upperVal)\r\n                  </Button>\r\n                  <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      style={{\"backgroundColor\": \"green\"}}\r\n                      onClick={()=>modifyUpperVal(-5)}\r\n                      className={classes.hsvButton}\r\n                  >\r\n                      Include less skin (-upperVal)\r\n                  </Button>\r\n              </div>\r\n              <div className={classes.column}>\r\n                  <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      style={{\"backgroundColor\": \"green\"}}\r\n                      onClick={()=>modifyHueRange(5)}\r\n                      className={classes.hsvButton}\r\n                  >\r\n                      Include more wound colors (+hue range)\r\n                  </Button>\r\n                  <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      style={{\"backgroundColor\": \"green\"}}\r\n                      onClick={()=>modifyHueRange(-5)}\r\n                      className={classes.hsvButton}\r\n                  >\r\n                      Reduce range of possible colors (-hue range)\r\n                  </Button>\r\n              </div>\r\n          </div>\r\n        </div>\r\n        :\r\n        <h4>Selecting mask automatically</h4>\r\n      }      \r\n      <div style={{\"height\":20}}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MaskSelector;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\ImageCropper\\imageCropperHelper.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\CustomInput.js",[],["89","90"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\CustomInput\\customInputStyle.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\index.js",["91","92"],"import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport style from \"./style.js\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {base_url} from \"../../constants.js\"\r\nconst useStyles = makeStyles(style);\r\n\r\n\r\n\r\nfunction DebugToolbar(props) {\r\n  const classes = useStyles();\r\n  const placeholder = \"hue, sat, val\";\r\n  return (\r\n    <div className={classes.column}>    \r\n      Debugging Toolbar:  \r\n      <div className={classes.column}>\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              const url = base_url + \"/testImage\";\r\n              //const url = \"/testImage\"\r\n              const form = new FormData();\r\n              form.append(\"file\", props.originalImage);\r\n              const analyze_options = {\r\n                method: \"POST\",\r\n                body: form,\r\n              };\r\n              fetch(url, analyze_options)\r\n                .then((response) => {\r\n                  if (!response.ok) throw Error(response.statusText);\r\n                  return response.json();\r\n                })\r\n                .then((image => {\r\n                  props.changeTestImage(image)\r\n                }))\r\n                .catch((error) => console.log(error)); \r\n            }}\r\n          >\r\n            Test Sending/Retrieving Image from API\r\n        </Button>\r\n        <img\r\n          src={\"data:image/png;base64,\" + props.testImage}\r\n          className={classes.exampleImage}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DebugToolbar;\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\DebugToolbar\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MaskSelector\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\HomePage.js",["93","94","95","96","97","98"],"import React from \"react\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from '@material-ui/core';\r\n\r\nimport styles from \"./style.js\";\r\nimport classNames from \"classnames\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\n\r\nimport baseImage from \"../../assets/tutorial/single/baseImage.PNG\"\r\nimport imageUploaded from \"../../assets/tutorial/single/imageUploaded.PNG\"\r\nimport multiAnalysisPageImg from \"../../assets/tutorial/single/multiAnalysisPageImg.PNG\"\r\nimport stepAreas from \"../../assets/tutorial/single/stepAreas.PNG\"\r\nimport stepChooseWidth from \"../../assets/tutorial/single/stepChooseWidth.PNG\"\r\nimport stepGridMasks from \"../../assets/tutorial/single/stepGridMasks.PNG\"\r\nimport stepGridMasks2 from \"../../assets/tutorial/single/stepGridMasks2.PNG\"\r\nimport stepImageMasked from \"../../assets/tutorial/single/stepImageMasked.PNG\"\r\nimport stepManualMask from \"../../assets/tutorial/single/stepManualMask.PNG\"\r\nimport stepMeasure from \"../../assets/tutorial/single/stepMeasure.PNG\"\r\nimport stepPressOk from \"../../assets/tutorial/single/stepPressOk.PNG\"\r\nimport uploadImageImg from \"../../assets/tutorial/single/uploadImageImg.PNG\"\r\nimport stepMultiSelect from \"../../assets/tutorial/single/stepMultiSelect.PNG\"\r\n\r\nimport { maskConstants } from \"../MaskSelector/constants.js\"\r\nimport {base_url} from \"../../constants.js\"\r\n\r\nclass HomePage extends React.Component {\r\n    state = {\r\n        zipImgList: [],\r\n        lowerMaskOne: maskConstants[\"B\"][\"lower_range\"][0],\r\n        lowerMaskTwo: maskConstants[\"B\"][\"lower_range\"][1],\r\n        upperMaskOne: maskConstants[\"B\"][\"upper_range\"][0],\r\n        upperMaskTwo: maskConstants[\"B\"][\"upper_range\"][1],\r\n        imageWidth: 2.54,\r\n        manualWidth: false,\r\n    };\r\n\r\n    componentDidMount(){\r\n        //Wake up backend server\r\n        //By sending a fetch request to the backend server, this will wake it up\r\n        //Heroku automatically shuts down apps after a long period of inactivity\r\n\r\n        let url = base_url;\r\n        let form = new FormData();\r\n        form.append(\"wakeup\", \"wakeup server\");\r\n        let analyze_options = {\r\n            method: \"POST\",\r\n            body: form,\r\n        };\r\n        fetch(url, analyze_options)\r\n        .then((response) => {\r\n            if (!response.ok) throw Error(response.statusText);\r\n                return response.json();\r\n            })\r\n        .catch((error) => console.log(error));\r\n    }\r\n\r\n    goToSingle = () => {\r\n        this.props.history.push('/single');\r\n    };\r\n\r\n    goToMulti = () => {\r\n        this.props.history.push('/multi');\r\n    }\r\n\r\n    handleCheckbox = name => event => {\r\n        this.setState({ [name]: event.target.checked });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classNames(classes.main, classes.mainRaised)}>\r\n                <div className={classes.container}>\r\n                    <div className={classes.row}>\r\n                        <Button \r\n                            className={classes.cropButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.goToSingle}>\r\n                            Go to single-image measurement\r\n                        </Button>\r\n                        <Button \r\n                            className={classes.cropButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={this.goToMulti}>\r\n                            Go to multi-image measurement\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classes.column}>\r\n                        <div className={classes.title}>\r\n                            <h2>Automatic Wound Area Measurement</h2>\r\n                            <h3>Home Page</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.column}>\r\n                        <h3>Tutorial</h3>\r\n                        <div className={classes.column}>\r\n                            <h4>Single-image measurement: </h4>\r\n                            First, upload an image\r\n                            <img\r\n                                src={uploadImageImg}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            Now, you must set what the reference width for the image is. If it's automatic (default) it will measure the length of the green line (c) and set that to be equal to the referense width (a). If you set it to manual (b), it will instead take the width of the image, and set that to the reference width (a). This way the software knows how big the wound is in real life, and not just in pixels.\r\n                            <img\r\n                                src={stepChooseWidth}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            Now, we will measure the area of the wounds. It is highly recommended to first crop the image (1) to a smaller size that still includes the wounds and the green line (for auto-width), so that if you need to manually adjust the mask it is easier to see the borders. Second, we now select the mask (2) to identify what type of wound we're looking for, specifically this changes the HSV color ranges for finding what counts as the wound. Finally, press the MEASURE AREA button (3) and the areas will be calculated.\r\n                            <img\r\n                                src={stepMeasure}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            After pressing the button, the image will be sent to a server which analyses the image. After a few seconds, the server should finish analysis and send it back to your computer- after which there will be a popup as shown below. Press ok on the popup.\r\n                            <img\r\n                                src={stepPressOk}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            Borders are now generated on the image, and the areas of each border (from left to right) are calculated and displayed.\r\n                            <img\r\n                                src={stepImageMasked}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            For most images, the border will be close but not exact. There are two ways to make the border closer to the wound. The first (easier) is to look at the grid below. The grid automatically adjusts the wound mask to stricter and looser settings and displays. The center image is the image with the original mask. By clicking on any of the images, you will be able to re-analyze the image based on those settings.\r\n                            <img\r\n                                src={stepGridMasks}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            After clicking, and then pressing the ok button like before, you can now see that a new grid of stricter and looser masks is generated around the image selected in the last step. Similarly as we clicked the top left image before, the original settings are now in the bottom right image.\r\n                            <img\r\n                                src={stepGridMasks2}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            You can continue this process until you are satisifed. Similarlly, the second way to adjust the wound mask would be to use the manual adjustment settings shown below:\r\n                            <img\r\n                                src={stepManualMask}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            Each of these buttons has instructions showing how it changes the wound mask, i.e. changing what counts as a wound for the software. This can be used from the beginning, or used along with the grid method. Once you're done, the areas are listed in the location below, corresponding to the wounds on the image from left to right.\r\n                            <img\r\n                                src={stepAreas}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            <h4>Multi-image measurement: </h4>\r\n                            The process for selecting the initial mask for the multi-image measurement method is the same except it uses only automatic width measurement. After selecting a mask, upload a zip file containing your images, it will process them in alphanumeric order.\r\n                            After pressing UPLOAD AND ANALYZE ZIP FILE it will immedietly send the file to the server and begin analyzing. This will generally take longer than single-image measurement because there are more images in the zip file to analyze.\r\n                            <img\r\n                                src={multiAnalysisPageImg}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            Once you press ok from the popup, you will then see all the images. They are listed in order, using the green line as a width reference. The areas are listed for the wounds in order of left-to-right just like in single analysis. For most images, the mask will not be exactly correct, so you can click on the image itself in order to automatically go to the single-image measurement page with that image automatically transfered.\r\n                            <img\r\n                                src={stepMultiSelect}\r\n                                className={classes.tutorialImage}\r\n                                alt=\"\"\r\n                            />\r\n                            <h4>Warnings/Closure</h4>\r\n                            <li>Make sure the width of the green line is correctly measured, as that is what is being used as reference for the wound area. Depending on lighting conditions, the software may not correctly process all of the green line.</li>\r\n                            <li>For some reason, if you've already send a zip file for analysis and want to send another zip file, you need to first reload the page. I've tried tracking down this bug for hours and hours and I've been unable to solve it, since it's not critical, I've put it on the backlog while I work on other more critical tasks.</li>\r\n                            <li>Since this web application is hosted for free on Heroku, after a long period of inactivity the frontend app and backend server will shutdown, so if you load the page after a long time it will likely give you an error at first. Don't worry, this is just because the server is stopped. After you tried to open the page (url request), it asked Heroku to restart the server and by the time it gives you the error, it has already started up again and you can just reload the page and you'll see the app.</li>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(HomePage);\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\HomePage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\constants.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\SingleAnalysisPage.js",["99","100","101","102","103","104","105","106","107"],"import React, { useEffect, useState } from \"react\";\r\nimport Cropper from \"../ImageCropper/imageCropper\";\r\n\r\nimport { Button, Checkbox, Tooltip, TextField } from '@material-ui/core';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport styles from \"./style.js\";\r\nimport classNames from \"classnames\";\r\n\r\nimport MaskSelector from \"../MaskSelector/index.js\";\r\nimport DebugToolbar from \"../DebugToolbar/index.js\";\r\n\r\nimport { maskConstants } from \"../MaskSelector/constants.js\"\r\nimport {base_url} from \"../../constants.js\"\r\n\r\nimport { Context } from \"../context\";\r\n\r\nfunction SingleAnalysisPage (props) {\r\n  \r\n  const { classes } = props;\r\n  const { lowerMaskOne, setLowerMaskOne, lowerMaskTwo, setLowerMaskTwo, upperMaskOne, setUpperMaskOne, upperMaskTwo, setUpperMaskTwo, setMask, zipImgList, setZipImgList, isManualMask, setIsManualMask } = React.useContext(Context)\r\n  const [currentImage, setCurrentImage] = useState()\r\n  const [originalImage, setOriginalImage] = useState()\r\n  const [currentImages, setCurrentImages] = useState()\r\n  const [edgedImage, setEdgedImage] = useState()\r\n  const [analyzed, setAnalyzed] = useState(false)\r\n  const [imageWidth, setImageWidth] = useState(2.54)\r\n  const [useCrop, setUseCrop] = useState(false)\r\n  const [areas, setAreas] = useState([])\r\n  const [testImage, setTestImage] = useState()\r\n  const [obj, setObj] = useState()\r\n  const [manualWidth, setManualWidth] = useState(false)\r\n  const [jumpHeading, setJumpHeading] = useState()\r\n\r\n  useEffect(() => {\r\n    if (props.location.state != null){\r\n      const inState = props.location.state\r\n      const obj = props.location.state.obj\r\n      if (obj != null){\r\n        \r\n        if (obj[\"drawn_image\"]){ \r\n          setCurrentImage(obj[\"drawn_image\"])\r\n        }\r\n        else{\r\n          setCurrentImage(obj[\"orig\"])\r\n        }\r\n          setOriginalImage(obj[\"orig\"])\r\n          setJumpHeading(obj[\"id\"])\r\n      }\r\n      setZipImgList(inState.zipImgList)\r\n    }\r\n  })\r\n\r\n  const goToMulti = () => {\r\n    if (zipImgList != null){\r\n      props.history.push({\r\n        pathname: '/multi',\r\n        state: { zipImgList: zipImgList }\r\n      })\r\n    }\r\n    else{\r\n      props.history.push('/multi');\r\n    }\r\n  }\r\n  \r\n  const goToHome = () => {\r\n    props.history.push('/home');\r\n  }\r\n\r\n  const getBase64 = (file, cb) => {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n        cb(reader.result)\r\n    };\r\n    reader.onerror = function (error) {\r\n        console.log('Error: ', error);\r\n    };\r\n  }\r\n\r\n  const completeCrop = (image) => {\r\n    setUseCrop(false)\r\n    setCurrentImage(image)\r\n    setOriginalImage(image)\r\n  };\r\n\r\n  const onImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let imgFile = event.target.files[0];\r\n      //let idCardBase64 = '';\r\n      getBase64(imgFile, (result) => {\r\n        setCurrentImage(result)\r\n        setOriginalImage(result)\r\n      });\r\n    }\r\n  };\r\n\r\n  const reanalyzeImage = async (obj) => {\r\n    setLowerMaskOne(obj[\"lower_range\"][0])\r\n    setLowerMaskTwo(obj[\"lower_range\"][1])\r\n    setUpperMaskOne(obj[\"upper_range\"][0])\r\n    setUpperMaskTwo(obj[\"upper_range\"][1])\r\n    analyzeImage(obj[\"lower_range\"][0], obj[\"lower_range\"][1], obj[\"upper_range\"][0], obj[\"upper_range\"][1])\r\n  };\r\n\r\n  const analyzeImage = async (lowMaskOne, lowMaskTwo, upMaskOne, upMaskTwo) => {\r\n    if (currentImage && imageWidth) {\r\n      const url = base_url + \"/measure\";\r\n      //const url = \"/measure\"\r\n      const form = new FormData();\r\n      form.append(\"base64\", originalImage);\r\n      form.append(\"width\", imageWidth);\r\n      form.append(\"manual_width\", manualWidth)\r\n      form.append(\"lower_mask_one\", lowMaskOne);\r\n      form.append(\"lower_mask_two\", lowMaskTwo);\r\n      form.append(\"upper_mask_one\", upMaskOne);\r\n      form.append(\"upper_mask_two\", upMaskTwo);\r\n      form.append(\"manual_mask\", isManualMask);\r\n\r\n      //Then analyze\r\n      const analyze_options = {\r\n        method: \"POST\",\r\n        body: form,\r\n      };\r\n      fetch(url, analyze_options)\r\n        .then((response) => {\r\n          if (!response.ok) throw Error(response.statusText);\r\n            return response.json();\r\n        })\r\n        .then((matrix) => {\r\n          if (matrix[1][1][\"error\"] == false){\r\n            setAnalyzed(true)\r\n            setCurrentImage(matrix[1][1][\"drawn_image\"])\r\n            setOriginalImage(matrix[1][1][\"orig\"])\r\n            setEdgedImage(matrix[1][1][\"edged_image\"])\r\n            setCurrentImages(matrix)\r\n            setAreas(matrix[1][1][\"areas\"])\r\n            alert(\"Images analyzed\")\r\n          }\r\n          else{\r\n            alert(matrix[1][1][\"error_message\"])\r\n          }\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else if (currentImage && !imageWidth) {\r\n      alert(\"Please specify an image width\");\r\n    } else if (!currentImage && imageWidth) {\r\n      alert(\"Please upload an image\");\r\n    } else {\r\n      alert(\"Please upload an image and specify it's real width\");\r\n    }\r\n  };\r\n\r\n  const handleWidthChange = (event) => {\r\n    setImageWidth(event.target.value)\r\n  };\r\n\r\n  const handleCropChange = () => {\r\n    setUseCrop(true)\r\n  };\r\n\r\n  const handleChangeTestImage = (image) => {\r\n    setTestImage(image)\r\n  }\r\n\r\n  const isManualWidth = () => {\r\n    setManualWidth(!manualWidth)\r\n  };\r\n\r\n  return (\r\n    <div className={classNames(classes.main, classes.mainRaised)}>\r\n      <div className={classes.container}>\r\n        <div className={classes.row}>\r\n            <Button \r\n                className={classes.cropButton}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={goToHome}>\r\n                Go to home page\r\n            </Button>\r\n            <Button \r\n                className={classes.cropButton}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={goToMulti}>\r\n                Go to multi-image measurement\r\n            </Button>\r\n          </div>\r\n        <div className={classes.title}>\r\n          <h2>Automatic Wound Area Measurement</h2>\r\n          <h4>Single-image measurement</h4>\r\n        </div>\r\n        <div className={classes.row}>\r\n          <div className={classes.column}>\r\n            <div className={classes.button} style={{ flex: 1 }}>\r\n              <h3>Upload Image</h3>\r\n              <Button\r\n                      variant=\"contained\"\r\n                      component=\"label\"\r\n                  >\r\n                  Upload Image\r\n                  <input\r\n                      type=\"file\"\r\n                      name=\"myImage\"\r\n                      hidden\r\n                      onChange={onImageChange}\r\n                  />\r\n                  </Button>\r\n            </div>\r\n            <div className={classes.column}>\r\n              <div style={{\"height\": 40}}/>\r\n              <Tooltip title=\"This is the length of the green line, if manual, this is the width of the image\" placement=\"top-start\">\r\n                <TextField\r\n                  id=\"standard-number\"\r\n                  label=\"Enter reference width (cm)\"\r\n                  defaultValue={imageWidth}\r\n                  InputProps={{\r\n                    onChange: handleWidthChange,\r\n                  }}\r\n                />\r\n              </Tooltip>\r\n              <div className={classes.row}>\r\n                <Checkbox\r\n                  checked={manualWidth}\r\n                  onChange={() => isManualWidth()}\r\n                  value=\"manualWidth\"\r\n                />\r\n                <div className={classes.centeredText}>Set width to manual</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={classes.column}>\r\n            \r\n            {useCrop ? (\r\n              <Cropper\r\n                currentImage={originalImage}\r\n                completeCrop={completeCrop}\r\n              />\r\n              ) : <>\r\n                    <h3>Image {jumpHeading}</h3>\r\n                    <div className={classes.column}>\r\n                        <img\r\n                          src={currentImage}\r\n                          className={classes.images}\r\n                          alt=\"\"\r\n                        />\r\n                        <Button\r\n                          className={classes.cropButton}\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={handleCropChange}\r\n                        >\r\n                          Crop Image\r\n                        </Button>\r\n                      </div>\r\n                  </>\r\n            }\r\n          </div>\r\n        </div>\r\n        <MaskSelector/>\r\n        <div className={classes.row}>\r\n          <div className={classes.column}>\r\n            <h3>Current areas:</h3>\r\n            {areas.map((value, i) => (\r\n              <b key={i}>{value}cm^2</b>\r\n            ))}\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => analyzeImage(lowerMaskOne, lowerMaskTwo, upperMaskOne, upperMaskTwo)}\r\n              className={classes.cropButton}\r\n            >\r\n              Measure area\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        { currentImages ?\r\n        <div className={classes.column}>\r\n          <p>Stricter farther right (+sat) and down (+val)</p>\r\n          {currentImages.map((row, i) => (\r\n            <div key={i} className={classes.row}>\r\n            {row.map((obj) => (\r\n              <img\r\n              src={obj[\"drawn_image\"]}\r\n              className={classes.gridImage}\r\n              alt=\"\"\r\n              onClick={() => reanalyzeImage(obj)}\r\n              />\r\n            ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        : null\r\n        }\r\n        <div style={{\"height\": 100}}/>\r\n        <DebugToolbar\r\n          originalImage={originalImage}\r\n          testImage={testImage}\r\n          changeTestImage={handleChangeTestImage}\r\n        />   \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(SingleAnalysisPage);\r\n","C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\MultiAnalysisPage.js",["108","109","110","111","112"],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\SingleAnalysisPage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\MultiAnalysisPage\\style.js",[],"C:\\Users\\runal\\Documents\\GitHub\\Wound-Analysis-Frontend\\src\\components\\context.js",["113"],"import React, { useState } from \"react\"\r\nimport { maskConstants } from \"./MaskSelector/constants.js\"\r\n\r\nconst Context = React.createContext()\r\n\r\nfunction Provider(props) {\r\n    const [lowerMaskOne, setLowerMaskOne] = useState(maskConstants[\"B\"][\"lower_range\"][0])\r\n    const [lowerMaskTwo, setLowerMaskTwo] = useState(maskConstants[\"B\"][\"lower_range\"][1])\r\n    const [upperMaskOne, setUpperMaskOne] = useState(maskConstants[\"B\"][\"upper_range\"][0])\r\n    const [upperMaskTwo, setUpperMaskTwo] = useState(maskConstants[\"B\"][\"upper_range\"][1])\r\n    const [isManualMask, setIsManualMask] = useState(false);\r\n    const [zipImgList, setZipImgList] = useState([]);\r\n\r\n    const setMask = async (mask) => {\r\n        setLowerMaskOne(mask[\"lower_range\"][0])\r\n        setLowerMaskTwo(mask[\"lower_range\"][1])\r\n        setUpperMaskOne(mask[\"upper_range\"][0])\r\n        setUpperMaskTwo(mask[\"upper_range\"][1])\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={{ \r\n            lowerMaskOne: lowerMaskOne,\r\n            setLowerMaskOne: setLowerMaskOne,\r\n            lowerMaskTwo: lowerMaskTwo,\r\n            setLowerMaskTwo: setLowerMaskTwo,\r\n            upperMaskOne: upperMaskOne,\r\n            setUpperMaskOne: setUpperMaskOne,\r\n            upperMaskTwo: upperMaskTwo,\r\n            setUpperMaskTwo: setUpperMaskTwo,\r\n            zipImgList: zipImgList,\r\n            setZipImgList: setZipImgList,\r\n            setMask: setMask,\r\n            isManualMask: isManualMask,\r\n            setIsManualMask, setIsManualMask,\r\n        }}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport { Context, Provider }",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":27},{"ruleId":"118","severity":1,"message":"122","line":47,"column":9,"nodeType":"120","messageId":"121","endLine":47,"endColumn":23},{"ruleId":"114","replacedBy":"123"},{"ruleId":"116","replacedBy":"124"},{"ruleId":"118","severity":1,"message":"125","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":17},{"ruleId":"118","severity":1,"message":"126","line":13,"column":9,"nodeType":"120","messageId":"121","endLine":13,"endColumn":20},{"ruleId":"118","severity":1,"message":"127","line":3,"column":18,"nodeType":"120","messageId":"121","endLine":3,"endColumn":26},{"ruleId":"118","severity":1,"message":"128","line":3,"column":28,"nodeType":"120","messageId":"121","endLine":3,"endColumn":35},{"ruleId":"118","severity":1,"message":"125","line":3,"column":37,"nodeType":"120","messageId":"121","endLine":3,"endColumn":46},{"ruleId":"118","severity":1,"message":"129","line":8,"column":8,"nodeType":"120","messageId":"121","endLine":8,"endColumn":20},{"ruleId":"118","severity":1,"message":"130","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":17},{"ruleId":"118","severity":1,"message":"131","line":11,"column":8,"nodeType":"120","messageId":"121","endLine":11,"endColumn":21},{"ruleId":"118","severity":1,"message":"132","line":13,"column":10,"nodeType":"120","messageId":"121","endLine":13,"endColumn":23},{"ruleId":"118","severity":1,"message":"133","line":21,"column":135,"nodeType":"120","messageId":"121","endLine":21,"endColumn":142},{"ruleId":"118","severity":1,"message":"134","line":21,"column":185,"nodeType":"120","messageId":"121","endLine":21,"endColumn":200},{"ruleId":"118","severity":1,"message":"135","line":25,"column":10,"nodeType":"120","messageId":"121","endLine":25,"endColumn":20},{"ruleId":"118","severity":1,"message":"136","line":26,"column":10,"nodeType":"120","messageId":"121","endLine":26,"endColumn":18},{"ruleId":"118","severity":1,"message":"137","line":31,"column":10,"nodeType":"120","messageId":"121","endLine":31,"endColumn":13},{"ruleId":"118","severity":1,"message":"138","line":31,"column":15,"nodeType":"120","messageId":"121","endLine":31,"endColumn":21},{"ruleId":"139","severity":1,"message":"140","line":35,"column":3,"nodeType":"120","endLine":35,"endColumn":12,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":131,"column":37,"nodeType":"144","messageId":"145","endLine":131,"endColumn":39},{"ruleId":"118","severity":1,"message":"119","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":27},{"ruleId":"118","severity":1,"message":"127","line":3,"column":18,"nodeType":"120","messageId":"121","endLine":3,"endColumn":26},{"ruleId":"118","severity":1,"message":"132","line":11,"column":10,"nodeType":"120","messageId":"121","endLine":11,"endColumn":23},{"ruleId":"118","severity":1,"message":"134","line":18,"column":110,"nodeType":"120","messageId":"121","endLine":18,"endColumn":125},{"ruleId":"118","severity":1,"message":"146","line":20,"column":25,"nodeType":"120","messageId":"121","endLine":20,"endColumn":39},{"ruleId":"147","severity":1,"message":"148","line":35,"column":30,"nodeType":"149","messageId":"145","endLine":35,"endColumn":45},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'modifyUpperSat' is assigned a value but never used.",["150"],["151"],"'TextField' is defined but never used.","'placeholder' is assigned a value but never used.","'Checkbox' is defined but never used.","'Tooltip' is defined but never used.","'MaskSelector' is defined but never used.","'baseImage' is defined but never used.","'imageUploaded' is defined but never used.","'maskConstants' is defined but never used.","'setMask' is assigned a value but never used.","'setIsManualMask' is assigned a value but never used.","'edgedImage' is assigned a value but never used.","'analyzed' is assigned a value but never used.","'obj' is assigned a value but never used.","'setObj' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setOriginalImage'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.location.state, setZipImgList] as a second argument to the useEffect Hook.",["152"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setManualWidth' is assigned a value but never used.","no-dupe-keys","Duplicate key 'setIsManualMask'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},"Add dependencies array: [props.location.state, setZipImgList]",{"range":"155","text":"156"},[1967,1967],", [props.location.state, setZipImgList]"]